# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roborts_msgs/GameZoneArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import roborts_msgs.msg

class GameZoneArray(genpy.Message):
  _md5sum = "ed52b36c9b2980794ba629e953695da2"
  _type = "roborts_msgs/GameZoneArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#game zone array
GameZone[6] zone

================================================================================
MSG: roborts_msgs/GameZone
#game zone
uint8 RED_HP_RECOVERY=1
uint8 RED_BULLET_SUPPLY=2
uint8 BLUE_HP_RECOVERY=3
uint8 BLUE_BULLET_SUPPLY=4
uint8 DISABLE_SHOOTING=5
uint8 DISABLE_MOVEMENT=6

uint8 type
bool active
"""
  __slots__ = ['zone']
  _slot_types = ['roborts_msgs/GameZone[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       zone

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GameZoneArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.zone is None:
        self.zone = [roborts_msgs.msg.GameZone() for _ in range(6)]
    else:
      self.zone = [roborts_msgs.msg.GameZone() for _ in range(6)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      if len(self.zone) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.zone), 'self.zone')))
      for val1 in self.zone:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.type, _x.active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.zone is None:
        self.zone = None
      end = 0
      self.zone = []
      for i in range(0, 6):
        val1 = roborts_msgs.msg.GameZone()
        _x = val1
        start = end
        end += 2
        (_x.type, _x.active,) = _get_struct_2B().unpack(str[start:end])
        val1.active = bool(val1.active)
        self.zone.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      if len(self.zone) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.zone), 'self.zone')))
      for val1 in self.zone:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.type, _x.active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.zone is None:
        self.zone = None
      end = 0
      self.zone = []
      for i in range(0, 6):
        val1 = roborts_msgs.msg.GameZone()
        _x = val1
        start = end
        end += 2
        (_x.type, _x.active,) = _get_struct_2B().unpack(str[start:end])
        val1.active = bool(val1.active)
        self.zone.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
