// Generated by gencpp from file roborts_msgs/ArmorMsg.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_ARMORMSG_H
#define ROBORTS_MSGS_MESSAGE_ARMORMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace roborts_msgs
{
template <class ContainerAllocator>
struct ArmorMsg_
{
  typedef ArmorMsg_<ContainerAllocator> Type;

  ArmorMsg_()
    : robot_detected(false)
    , armor_detected(false)
    , robot_pose(0)
    , color(0)
    , id(0)
    , area(0)
    , pose()  {
    }
  ArmorMsg_(const ContainerAllocator& _alloc)
    : robot_detected(false)
    , armor_detected(false)
    , robot_pose(0)
    , color(0)
    , id(0)
    , area(0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _robot_detected_type;
  _robot_detected_type robot_detected;

   typedef uint8_t _armor_detected_type;
  _armor_detected_type armor_detected;

   typedef int8_t _robot_pose_type;
  _robot_pose_type robot_pose;

   typedef int8_t _color_type;
  _color_type color;

   typedef int8_t _id_type;
  _id_type id;

   typedef int32_t _area_type;
  _area_type area;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::roborts_msgs::ArmorMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::ArmorMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ArmorMsg_

typedef ::roborts_msgs::ArmorMsg_<std::allocator<void> > ArmorMsg;

typedef boost::shared_ptr< ::roborts_msgs::ArmorMsg > ArmorMsgPtr;
typedef boost::shared_ptr< ::roborts_msgs::ArmorMsg const> ArmorMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::ArmorMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::ArmorMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborts_msgs::ArmorMsg_<ContainerAllocator1> & lhs, const ::roborts_msgs::ArmorMsg_<ContainerAllocator2> & rhs)
{
  return lhs.robot_detected == rhs.robot_detected &&
    lhs.armor_detected == rhs.armor_detected &&
    lhs.robot_pose == rhs.robot_pose &&
    lhs.color == rhs.color &&
    lhs.id == rhs.id &&
    lhs.area == rhs.area &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborts_msgs::ArmorMsg_<ContainerAllocator1> & lhs, const ::roborts_msgs::ArmorMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::ArmorMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::ArmorMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::ArmorMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::ArmorMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::ArmorMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::ArmorMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::ArmorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0168548d106cea9b6c2d1718be86c76f";
  }

  static const char* value(const ::roborts_msgs::ArmorMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0168548d106cea9bULL;
  static const uint64_t static_value2 = 0x6c2d1718be86c76fULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::ArmorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/ArmorMsg";
  }

  static const char* value(const ::roborts_msgs::ArmorMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::ArmorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool robot_detected\n"
"bool armor_detected\n"
"int8 robot_pose\n"
"int8 color # 0 RED 1 BLUE\n"
"int8 id # 1 2\n"
"int32 area # area of the armor\n"
"geometry_msgs/Point pose\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roborts_msgs::ArmorMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::ArmorMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_detected);
      stream.next(m.armor_detected);
      stream.next(m.robot_pose);
      stream.next(m.color);
      stream.next(m.id);
      stream.next(m.area);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmorMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::ArmorMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::ArmorMsg_<ContainerAllocator>& v)
  {
    s << indent << "robot_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_detected);
    s << indent << "armor_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armor_detected);
    s << indent << "robot_pose: ";
    Printer<int8_t>::stream(s, indent + "  ", v.robot_pose);
    s << indent << "color: ";
    Printer<int8_t>::stream(s, indent + "  ", v.color);
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
    s << indent << "area: ";
    Printer<int32_t>::stream(s, indent + "  ", v.area);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_ARMORMSG_H
