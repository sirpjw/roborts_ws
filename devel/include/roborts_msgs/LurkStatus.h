// Generated by gencpp from file roborts_msgs/LurkStatus.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_LURKSTATUS_H
#define ROBORTS_MSGS_MESSAGE_LURKSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roborts_msgs
{
template <class ContainerAllocator>
struct LurkStatus_
{
  typedef LurkStatus_<ContainerAllocator> Type;

  LurkStatus_()
    : lurk_mode(0)  {
    }
  LurkStatus_(const ContainerAllocator& _alloc)
    : lurk_mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _lurk_mode_type;
  _lurk_mode_type lurk_mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(lurk_status_normal)
  #undef lurk_status_normal
#endif
#if defined(_WIN32) && defined(lurk_status_ready)
  #undef lurk_status_ready
#endif
#if defined(_WIN32) && defined(lurk_status_lurking)
  #undef lurk_status_lurking
#endif

  enum {
    lurk_status_normal = 0u,
    lurk_status_ready = 1u,
    lurk_status_lurking = 2u,
  };


  typedef boost::shared_ptr< ::roborts_msgs::LurkStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::LurkStatus_<ContainerAllocator> const> ConstPtr;

}; // struct LurkStatus_

typedef ::roborts_msgs::LurkStatus_<std::allocator<void> > LurkStatus;

typedef boost::shared_ptr< ::roborts_msgs::LurkStatus > LurkStatusPtr;
typedef boost::shared_ptr< ::roborts_msgs::LurkStatus const> LurkStatusConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::LurkStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::LurkStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborts_msgs::LurkStatus_<ContainerAllocator1> & lhs, const ::roborts_msgs::LurkStatus_<ContainerAllocator2> & rhs)
{
  return lhs.lurk_mode == rhs.lurk_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborts_msgs::LurkStatus_<ContainerAllocator1> & lhs, const ::roborts_msgs::LurkStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::LurkStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::LurkStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::LurkStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::LurkStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::LurkStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::LurkStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::LurkStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c957f31afa8b58bcdc83bff4a2db4791";
  }

  static const char* value(const ::roborts_msgs::LurkStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc957f31afa8b58bcULL;
  static const uint64_t static_value2 = 0xdc83bff4a2db4791ULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::LurkStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/LurkStatus";
  }

  static const char* value(const ::roborts_msgs::LurkStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::LurkStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#lurking status\n"
"\n"
"uint8 lurk_status_normal=0\n"
"uint8 lurk_status_ready=1\n"
"uint8 lurk_status_lurking=2\n"
"\n"
"uint8 lurk_mode\n"
;
  }

  static const char* value(const ::roborts_msgs::LurkStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::LurkStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lurk_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LurkStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::LurkStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::LurkStatus_<ContainerAllocator>& v)
  {
    s << indent << "lurk_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lurk_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_LURKSTATUS_H
