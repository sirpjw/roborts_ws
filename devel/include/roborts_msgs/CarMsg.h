// Generated by gencpp from file roborts_msgs/CarMsg.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_CARMSG_H
#define ROBORTS_MSGS_MESSAGE_CARMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roborts_msgs
{
template <class ContainerAllocator>
struct CarMsg_
{
  typedef CarMsg_<ContainerAllocator> Type;

  CarMsg_()
    : id(0)
    , color(0)
    , x(0.0)
    , y(0.0)  {
    }
  CarMsg_(const ContainerAllocator& _alloc)
    : id(0)
    , color(0)
    , x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _color_type;
  _color_type color;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::roborts_msgs::CarMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::CarMsg_<ContainerAllocator> const> ConstPtr;

}; // struct CarMsg_

typedef ::roborts_msgs::CarMsg_<std::allocator<void> > CarMsg;

typedef boost::shared_ptr< ::roborts_msgs::CarMsg > CarMsgPtr;
typedef boost::shared_ptr< ::roborts_msgs::CarMsg const> CarMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::CarMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::CarMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborts_msgs::CarMsg_<ContainerAllocator1> & lhs, const ::roborts_msgs::CarMsg_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.color == rhs.color &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborts_msgs::CarMsg_<ContainerAllocator1> & lhs, const ::roborts_msgs::CarMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::CarMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::CarMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::CarMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::CarMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::CarMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::CarMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::CarMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0abbd31b1cbaf15ed4630edeaea991fd";
  }

  static const char* value(const ::roborts_msgs::CarMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0abbd31b1cbaf15eULL;
  static const uint64_t static_value2 = 0xd4630edeaea991fdULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::CarMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/CarMsg";
  }

  static const char* value(const ::roborts_msgs::CarMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::CarMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 id\n"
"char color\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::roborts_msgs::CarMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::CarMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.color);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::CarMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::CarMsg_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_CARMSG_H
