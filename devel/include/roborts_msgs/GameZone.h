// Generated by gencpp from file roborts_msgs/GameZone.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_GAMEZONE_H
#define ROBORTS_MSGS_MESSAGE_GAMEZONE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roborts_msgs
{
template <class ContainerAllocator>
struct GameZone_
{
  typedef GameZone_<ContainerAllocator> Type;

  GameZone_()
    : type(0)
    , active(false)  {
    }
  GameZone_(const ContainerAllocator& _alloc)
    : type(0)
    , active(false)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _active_type;
  _active_type active;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RED_HP_RECOVERY)
  #undef RED_HP_RECOVERY
#endif
#if defined(_WIN32) && defined(RED_BULLET_SUPPLY)
  #undef RED_BULLET_SUPPLY
#endif
#if defined(_WIN32) && defined(BLUE_HP_RECOVERY)
  #undef BLUE_HP_RECOVERY
#endif
#if defined(_WIN32) && defined(BLUE_BULLET_SUPPLY)
  #undef BLUE_BULLET_SUPPLY
#endif
#if defined(_WIN32) && defined(DISABLE_SHOOTING)
  #undef DISABLE_SHOOTING
#endif
#if defined(_WIN32) && defined(DISABLE_MOVEMENT)
  #undef DISABLE_MOVEMENT
#endif

  enum {
    RED_HP_RECOVERY = 1u,
    RED_BULLET_SUPPLY = 2u,
    BLUE_HP_RECOVERY = 3u,
    BLUE_BULLET_SUPPLY = 4u,
    DISABLE_SHOOTING = 5u,
    DISABLE_MOVEMENT = 6u,
  };


  typedef boost::shared_ptr< ::roborts_msgs::GameZone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::GameZone_<ContainerAllocator> const> ConstPtr;

}; // struct GameZone_

typedef ::roborts_msgs::GameZone_<std::allocator<void> > GameZone;

typedef boost::shared_ptr< ::roborts_msgs::GameZone > GameZonePtr;
typedef boost::shared_ptr< ::roborts_msgs::GameZone const> GameZoneConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::GameZone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::GameZone_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborts_msgs::GameZone_<ContainerAllocator1> & lhs, const ::roborts_msgs::GameZone_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.active == rhs.active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborts_msgs::GameZone_<ContainerAllocator1> & lhs, const ::roborts_msgs::GameZone_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::GameZone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::GameZone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::GameZone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::GameZone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::GameZone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::GameZone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::GameZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b28f2688671e9a9ba1cf15df35d7a80d";
  }

  static const char* value(const ::roborts_msgs::GameZone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb28f2688671e9a9bULL;
  static const uint64_t static_value2 = 0xa1cf15df35d7a80dULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::GameZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/GameZone";
  }

  static const char* value(const ::roborts_msgs::GameZone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::GameZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#game zone\n"
"uint8 RED_HP_RECOVERY=1\n"
"uint8 RED_BULLET_SUPPLY=2\n"
"uint8 BLUE_HP_RECOVERY=3\n"
"uint8 BLUE_BULLET_SUPPLY=4\n"
"uint8 DISABLE_SHOOTING=5\n"
"uint8 DISABLE_MOVEMENT=6\n"
"\n"
"uint8 type\n"
"bool active\n"
;
  }

  static const char* value(const ::roborts_msgs::GameZone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::GameZone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GameZone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::GameZone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::GameZone_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_GAMEZONE_H
