// Generated by gencpp from file roborts_msgs/ArmorMsgs.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_ARMORMSGS_H
#define ROBORTS_MSGS_MESSAGE_ARMORMSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roborts_msgs/ArmorMsg.h>

namespace roborts_msgs
{
template <class ContainerAllocator>
struct ArmorMsgs_
{
  typedef ArmorMsgs_<ContainerAllocator> Type;

  ArmorMsgs_()
    : detected(false)
    , detected_info()  {
    }
  ArmorMsgs_(const ContainerAllocator& _alloc)
    : detected(false)
    , detected_info(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _detected_type;
  _detected_type detected;

   typedef std::vector< ::roborts_msgs::ArmorMsg_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::roborts_msgs::ArmorMsg_<ContainerAllocator> >> _detected_info_type;
  _detected_info_type detected_info;





  typedef boost::shared_ptr< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> const> ConstPtr;

}; // struct ArmorMsgs_

typedef ::roborts_msgs::ArmorMsgs_<std::allocator<void> > ArmorMsgs;

typedef boost::shared_ptr< ::roborts_msgs::ArmorMsgs > ArmorMsgsPtr;
typedef boost::shared_ptr< ::roborts_msgs::ArmorMsgs const> ArmorMsgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::ArmorMsgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborts_msgs::ArmorMsgs_<ContainerAllocator1> & lhs, const ::roborts_msgs::ArmorMsgs_<ContainerAllocator2> & rhs)
{
  return lhs.detected == rhs.detected &&
    lhs.detected_info == rhs.detected_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborts_msgs::ArmorMsgs_<ContainerAllocator1> & lhs, const ::roborts_msgs::ArmorMsgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7abd3895cfb29c9d0395c412cceb145f";
  }

  static const char* value(const ::roborts_msgs::ArmorMsgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7abd3895cfb29c9dULL;
  static const uint64_t static_value2 = 0x0395c412cceb145fULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/ArmorMsgs";
  }

  static const char* value(const ::roborts_msgs::ArmorMsgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool detected\n"
"ArmorMsg[] detected_info\n"
"================================================================================\n"
"MSG: roborts_msgs/ArmorMsg\n"
"bool robot_detected\n"
"bool armor_detected\n"
"int8 robot_pose\n"
"int8 color # 0 RED 1 BLUE\n"
"int8 id # 1 2\n"
"int32 area # area of the armor\n"
"geometry_msgs/Point pose\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roborts_msgs::ArmorMsgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detected);
      stream.next(m.detected_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmorMsgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::ArmorMsgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::ArmorMsgs_<ContainerAllocator>& v)
  {
    s << indent << "detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detected);
    s << indent << "detected_info[]" << std::endl;
    for (size_t i = 0; i < v.detected_info.size(); ++i)
    {
      s << indent << "  detected_info[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roborts_msgs::ArmorMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.detected_info[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_ARMORMSGS_H
