// Generated by gencpp from file roborts_msgs/RobotInfo.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_ROBOTINFO_H
#define ROBORTS_MSGS_MESSAGE_ROBOTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roborts_msgs
{
template <class ContainerAllocator>
struct RobotInfo_
{
  typedef RobotInfo_<ContainerAllocator> Type;

  RobotInfo_()
    : id(0)
    , level(0)
    , remain_hp(0)
    , max_hp(0)
    , remain_bullets(0)
    , max_bullets(0)
    , robot_color(0)
    , chassis_enable(false)
    , shooter_enable(false)
    , fricwheel_enable(false)  {
    }
  RobotInfo_(const ContainerAllocator& _alloc)
    : id(0)
    , level(0)
    , remain_hp(0)
    , max_hp(0)
    , remain_bullets(0)
    , max_bullets(0)
    , robot_color(0)
    , chassis_enable(false)
    , shooter_enable(false)
    , fricwheel_enable(false)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _level_type;
  _level_type level;

   typedef uint16_t _remain_hp_type;
  _remain_hp_type remain_hp;

   typedef uint16_t _max_hp_type;
  _max_hp_type max_hp;

   typedef uint16_t _remain_bullets_type;
  _remain_bullets_type remain_bullets;

   typedef uint16_t _max_bullets_type;
  _max_bullets_type max_bullets;

   typedef uint8_t _robot_color_type;
  _robot_color_type robot_color;

   typedef uint8_t _chassis_enable_type;
  _chassis_enable_type chassis_enable;

   typedef uint8_t _shooter_enable_type;
  _shooter_enable_type shooter_enable;

   typedef uint8_t _fricwheel_enable_type;
  _fricwheel_enable_type fricwheel_enable;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RED)
  #undef RED
#endif
#if defined(_WIN32) && defined(BLUE)
  #undef BLUE
#endif
#if defined(_WIN32) && defined(UNKONWN)
  #undef UNKONWN
#endif

  enum {
    RED = 1u,
    BLUE = 2u,
    UNKONWN = 0u,
  };


  typedef boost::shared_ptr< ::roborts_msgs::RobotInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::RobotInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RobotInfo_

typedef ::roborts_msgs::RobotInfo_<std::allocator<void> > RobotInfo;

typedef boost::shared_ptr< ::roborts_msgs::RobotInfo > RobotInfoPtr;
typedef boost::shared_ptr< ::roborts_msgs::RobotInfo const> RobotInfoConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::RobotInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::RobotInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborts_msgs::RobotInfo_<ContainerAllocator1> & lhs, const ::roborts_msgs::RobotInfo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.level == rhs.level &&
    lhs.remain_hp == rhs.remain_hp &&
    lhs.max_hp == rhs.max_hp &&
    lhs.remain_bullets == rhs.remain_bullets &&
    lhs.max_bullets == rhs.max_bullets &&
    lhs.robot_color == rhs.robot_color &&
    lhs.chassis_enable == rhs.chassis_enable &&
    lhs.shooter_enable == rhs.shooter_enable &&
    lhs.fricwheel_enable == rhs.fricwheel_enable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborts_msgs::RobotInfo_<ContainerAllocator1> & lhs, const ::roborts_msgs::RobotInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::RobotInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::RobotInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::RobotInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::RobotInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::RobotInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::RobotInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42151e01fd01be2567ca9939a7e62df3";
  }

  static const char* value(const ::roborts_msgs::RobotInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42151e01fd01be25ULL;
  static const uint64_t static_value2 = 0x67ca9939a7e62df3ULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/RobotInfo";
  }

  static const char* value(const ::roborts_msgs::RobotInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#robot status\n"
"uint8 id\n"
"uint8 level\n"
"uint16 remain_hp\n"
"uint16 max_hp\n"
"\n"
"uint16 remain_bullets\n"
"uint16 max_bullets\n"
"\n"
"uint8 robot_color\n"
"\n"
"# devices enable\n"
"bool chassis_enable\n"
"bool shooter_enable\n"
"bool fricwheel_enable\n"
"\n"
"# color Defined Value\n"
"uint8 RED = 1\n"
"uint8 BLUE = 2\n"
"uint8 UNKONWN = 0\n"
;
  }

  static const char* value(const ::roborts_msgs::RobotInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::RobotInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.level);
      stream.next(m.remain_hp);
      stream.next(m.max_hp);
      stream.next(m.remain_bullets);
      stream.next(m.max_bullets);
      stream.next(m.robot_color);
      stream.next(m.chassis_enable);
      stream.next(m.shooter_enable);
      stream.next(m.fricwheel_enable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::RobotInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::RobotInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.level);
    s << indent << "remain_hp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.remain_hp);
    s << indent << "max_hp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.max_hp);
    s << indent << "remain_bullets: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.remain_bullets);
    s << indent << "max_bullets: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.max_bullets);
    s << indent << "robot_color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_color);
    s << indent << "chassis_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.chassis_enable);
    s << indent << "shooter_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shooter_enable);
    s << indent << "fricwheel_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fricwheel_enable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_ROBOTINFO_H
