// Generated by gencpp from file roborts_msgs/GameZoneArray.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_GAMEZONEARRAY_H
#define ROBORTS_MSGS_MESSAGE_GAMEZONEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roborts_msgs/GameZone.h>

namespace roborts_msgs
{
template <class ContainerAllocator>
struct GameZoneArray_
{
  typedef GameZoneArray_<ContainerAllocator> Type;

  GameZoneArray_()
    : zone()  {
    }
  GameZoneArray_(const ContainerAllocator& _alloc)
    : zone()  {
  (void)_alloc;
      zone.assign( ::roborts_msgs::GameZone_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::roborts_msgs::GameZone_<ContainerAllocator> , 6>  _zone_type;
  _zone_type zone;





  typedef boost::shared_ptr< ::roborts_msgs::GameZoneArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::GameZoneArray_<ContainerAllocator> const> ConstPtr;

}; // struct GameZoneArray_

typedef ::roborts_msgs::GameZoneArray_<std::allocator<void> > GameZoneArray;

typedef boost::shared_ptr< ::roborts_msgs::GameZoneArray > GameZoneArrayPtr;
typedef boost::shared_ptr< ::roborts_msgs::GameZoneArray const> GameZoneArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::GameZoneArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::GameZoneArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborts_msgs::GameZoneArray_<ContainerAllocator1> & lhs, const ::roborts_msgs::GameZoneArray_<ContainerAllocator2> & rhs)
{
  return lhs.zone == rhs.zone;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborts_msgs::GameZoneArray_<ContainerAllocator1> & lhs, const ::roborts_msgs::GameZoneArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::GameZoneArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::GameZoneArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::GameZoneArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::GameZoneArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::GameZoneArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::GameZoneArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::GameZoneArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed52b36c9b2980794ba629e953695da2";
  }

  static const char* value(const ::roborts_msgs::GameZoneArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed52b36c9b298079ULL;
  static const uint64_t static_value2 = 0x4ba629e953695da2ULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::GameZoneArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/GameZoneArray";
  }

  static const char* value(const ::roborts_msgs::GameZoneArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::GameZoneArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#game zone array\n"
"GameZone[6] zone\n"
"\n"
"================================================================================\n"
"MSG: roborts_msgs/GameZone\n"
"#game zone\n"
"uint8 RED_HP_RECOVERY=1\n"
"uint8 RED_BULLET_SUPPLY=2\n"
"uint8 BLUE_HP_RECOVERY=3\n"
"uint8 BLUE_BULLET_SUPPLY=4\n"
"uint8 DISABLE_SHOOTING=5\n"
"uint8 DISABLE_MOVEMENT=6\n"
"\n"
"uint8 type\n"
"bool active\n"
;
  }

  static const char* value(const ::roborts_msgs::GameZoneArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::GameZoneArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zone);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GameZoneArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::GameZoneArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::GameZoneArray_<ContainerAllocator>& v)
  {
    s << indent << "zone[]" << std::endl;
    for (size_t i = 0; i < v.zone.size(); ++i)
    {
      s << indent << "  zone[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roborts_msgs::GameZone_<ContainerAllocator> >::stream(s, indent + "    ", v.zone[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_GAMEZONEARRAY_H
