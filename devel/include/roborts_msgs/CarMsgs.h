// Generated by gencpp from file roborts_msgs/CarMsgs.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_CARMSGS_H
#define ROBORTS_MSGS_MESSAGE_CARMSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roborts_msgs/CarMsg.h>

namespace roborts_msgs
{
template <class ContainerAllocator>
struct CarMsgs_
{
  typedef CarMsgs_<ContainerAllocator> Type;

  CarMsgs_()
    : stamp_guard()
    , car_msgs()  {
    }
  CarMsgs_(const ContainerAllocator& _alloc)
    : stamp_guard()
    , car_msgs(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_guard_type;
  _stamp_guard_type stamp_guard;

   typedef std::vector< ::roborts_msgs::CarMsg_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::roborts_msgs::CarMsg_<ContainerAllocator> >> _car_msgs_type;
  _car_msgs_type car_msgs;





  typedef boost::shared_ptr< ::roborts_msgs::CarMsgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::CarMsgs_<ContainerAllocator> const> ConstPtr;

}; // struct CarMsgs_

typedef ::roborts_msgs::CarMsgs_<std::allocator<void> > CarMsgs;

typedef boost::shared_ptr< ::roborts_msgs::CarMsgs > CarMsgsPtr;
typedef boost::shared_ptr< ::roborts_msgs::CarMsgs const> CarMsgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::CarMsgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::CarMsgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborts_msgs::CarMsgs_<ContainerAllocator1> & lhs, const ::roborts_msgs::CarMsgs_<ContainerAllocator2> & rhs)
{
  return lhs.stamp_guard == rhs.stamp_guard &&
    lhs.car_msgs == rhs.car_msgs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborts_msgs::CarMsgs_<ContainerAllocator1> & lhs, const ::roborts_msgs::CarMsgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::CarMsgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::CarMsgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::CarMsgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::CarMsgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::CarMsgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::CarMsgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::CarMsgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c4dd9fe02c25c3ec9d783997231c682";
  }

  static const char* value(const ::roborts_msgs::CarMsgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c4dd9fe02c25c3eULL;
  static const uint64_t static_value2 = 0xc9d783997231c682ULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::CarMsgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/CarMsgs";
  }

  static const char* value(const ::roborts_msgs::CarMsgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::CarMsgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp_guard\n"
"CarMsg[]  car_msgs\n"
"\n"
"================================================================================\n"
"MSG: roborts_msgs/CarMsg\n"
"uint8 id\n"
"char color\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::roborts_msgs::CarMsgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::CarMsgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp_guard);
      stream.next(m.car_msgs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarMsgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::CarMsgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::CarMsgs_<ContainerAllocator>& v)
  {
    s << indent << "stamp_guard: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp_guard);
    s << indent << "car_msgs[]" << std::endl;
    for (size_t i = 0; i < v.car_msgs.size(); ++i)
    {
      s << indent << "  car_msgs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roborts_msgs::CarMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.car_msgs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_CARMSGS_H
