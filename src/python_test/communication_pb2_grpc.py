# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings
import sys
sys.path.append("/home/sirpjw/roborts_ws/src/python_test")
import communication_pb2 as communication__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in communication_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RobotCommStub(object):
    """机器人信息
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBlood = channel.unary_unary(
                '/communication.RobotComm/GetBlood',
                request_serializer=communication__pb2.CommonRequest.SerializeToString,
                response_deserializer=communication__pb2.Blood.FromString,
                _registered_method=True)
        self.GetBullet = channel.unary_unary(
                '/communication.RobotComm/GetBullet',
                request_serializer=communication__pb2.CommonRequest.SerializeToString,
                response_deserializer=communication__pb2.Bullet.FromString,
                _registered_method=True)
        self.GetPosture = channel.unary_unary(
                '/communication.RobotComm/GetPosture',
                request_serializer=communication__pb2.CommonRequest.SerializeToString,
                response_deserializer=communication__pb2.Posture.FromString,
                _registered_method=True)
        self.GetGimbalYaw = channel.unary_unary(
                '/communication.RobotComm/GetGimbalYaw',
                request_serializer=communication__pb2.CommonRequest.SerializeToString,
                response_deserializer=communication__pb2.GimbalYaw.FromString,
                _registered_method=True)
        self.GetVelocity = channel.unary_unary(
                '/communication.RobotComm/GetVelocity',
                request_serializer=communication__pb2.CommonRequest.SerializeToString,
                response_deserializer=communication__pb2.Velocity.FromString,
                _registered_method=True)
        self.GetAttacked = channel.unary_unary(
                '/communication.RobotComm/GetAttacked',
                request_serializer=communication__pb2.CommonRequest.SerializeToString,
                response_deserializer=communication__pb2.Attacked.FromString,
                _registered_method=True)
        self.GetObjectDection = channel.unary_unary(
                '/communication.RobotComm/GetObjectDection',
                request_serializer=communication__pb2.CommonRequest.SerializeToString,
                response_deserializer=communication__pb2.ObjectDection.FromString,
                _registered_method=True)
        self.PostBlood = channel.unary_unary(
                '/communication.RobotComm/PostBlood',
                request_serializer=communication__pb2.Blood.SerializeToString,
                response_deserializer=communication__pb2.Response.FromString,
                _registered_method=True)
        self.PostBullet = channel.unary_unary(
                '/communication.RobotComm/PostBullet',
                request_serializer=communication__pb2.Bullet.SerializeToString,
                response_deserializer=communication__pb2.Response.FromString,
                _registered_method=True)
        self.PostDestination = channel.unary_unary(
                '/communication.RobotComm/PostDestination',
                request_serializer=communication__pb2.Destination.SerializeToString,
                response_deserializer=communication__pb2.Response.FromString,
                _registered_method=True)
        self.PostFricWheel = channel.unary_unary(
                '/communication.RobotComm/PostFricWheel',
                request_serializer=communication__pb2.FricWheel.SerializeToString,
                response_deserializer=communication__pb2.Response.FromString,
                _registered_method=True)
        self.PostChassisStop = channel.unary_unary(
                '/communication.RobotComm/PostChassisStop',
                request_serializer=communication__pb2.ChassisStop.SerializeToString,
                response_deserializer=communication__pb2.Response.FromString,
                _registered_method=True)
        self.PostShooter = channel.unary_unary(
                '/communication.RobotComm/PostShooter',
                request_serializer=communication__pb2.Shooter.SerializeToString,
                response_deserializer=communication__pb2.Response.FromString,
                _registered_method=True)
        self.PostSystemRun = channel.unary_unary(
                '/communication.RobotComm/PostSystemRun',
                request_serializer=communication__pb2.CommonRequest.SerializeToString,
                response_deserializer=communication__pb2.Response.FromString,
                _registered_method=True)


class RobotCommServicer(object):
    """机器人信息
    """

    def GetBlood(self, request, context):
        """! GET Method
        向服务器索取血量信息 传回血量信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBullet(self, request, context):
        """向服务器索取弹药量信息 传回弹药量信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPosture(self, request, context):
        """向服务器索取位姿信息 传回位姿信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGimbalYaw(self, request, context):
        """向服务器索取枪口朝向信息 传回枪口朝向信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVelocity(self, request, context):
        """向服务器索取速度信息 传回速度信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAttacked(self, request, context):
        """向服务器索取受击信息 传回受击信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObjectDection(self, request, context):
        """向服务器索取位置信息 传回位置信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostBlood(self, request, context):
        """! POST Method
        向服务器传输血量信息 传回是否正确设置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostBullet(self, request, context):
        """向服务器传输弹药量信息 传回是否正确设置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostDestination(self, request, context):
        """向服务器传输目的地信息 传回是否正确设置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostFricWheel(self, request, context):
        """向服务器传输摩擦轮信息 传回是否正确设置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostChassisStop(self, request, context):
        """向服务器传输停止信息 传回是否正确设置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostShooter(self, request, context):
        """向服务器传输子弹开关信息 传回是否正确设置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostSystemRun(self, request, context):
        """向服务器传递系统开启的指令 System Run
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RobotCommServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBlood': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlood,
                    request_deserializer=communication__pb2.CommonRequest.FromString,
                    response_serializer=communication__pb2.Blood.SerializeToString,
            ),
            'GetBullet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBullet,
                    request_deserializer=communication__pb2.CommonRequest.FromString,
                    response_serializer=communication__pb2.Bullet.SerializeToString,
            ),
            'GetPosture': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPosture,
                    request_deserializer=communication__pb2.CommonRequest.FromString,
                    response_serializer=communication__pb2.Posture.SerializeToString,
            ),
            'GetGimbalYaw': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGimbalYaw,
                    request_deserializer=communication__pb2.CommonRequest.FromString,
                    response_serializer=communication__pb2.GimbalYaw.SerializeToString,
            ),
            'GetVelocity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVelocity,
                    request_deserializer=communication__pb2.CommonRequest.FromString,
                    response_serializer=communication__pb2.Velocity.SerializeToString,
            ),
            'GetAttacked': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttacked,
                    request_deserializer=communication__pb2.CommonRequest.FromString,
                    response_serializer=communication__pb2.Attacked.SerializeToString,
            ),
            'GetObjectDection': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObjectDection,
                    request_deserializer=communication__pb2.CommonRequest.FromString,
                    response_serializer=communication__pb2.ObjectDection.SerializeToString,
            ),
            'PostBlood': grpc.unary_unary_rpc_method_handler(
                    servicer.PostBlood,
                    request_deserializer=communication__pb2.Blood.FromString,
                    response_serializer=communication__pb2.Response.SerializeToString,
            ),
            'PostBullet': grpc.unary_unary_rpc_method_handler(
                    servicer.PostBullet,
                    request_deserializer=communication__pb2.Bullet.FromString,
                    response_serializer=communication__pb2.Response.SerializeToString,
            ),
            'PostDestination': grpc.unary_unary_rpc_method_handler(
                    servicer.PostDestination,
                    request_deserializer=communication__pb2.Destination.FromString,
                    response_serializer=communication__pb2.Response.SerializeToString,
            ),
            'PostFricWheel': grpc.unary_unary_rpc_method_handler(
                    servicer.PostFricWheel,
                    request_deserializer=communication__pb2.FricWheel.FromString,
                    response_serializer=communication__pb2.Response.SerializeToString,
            ),
            'PostChassisStop': grpc.unary_unary_rpc_method_handler(
                    servicer.PostChassisStop,
                    request_deserializer=communication__pb2.ChassisStop.FromString,
                    response_serializer=communication__pb2.Response.SerializeToString,
            ),
            'PostShooter': grpc.unary_unary_rpc_method_handler(
                    servicer.PostShooter,
                    request_deserializer=communication__pb2.Shooter.FromString,
                    response_serializer=communication__pb2.Response.SerializeToString,
            ),
            'PostSystemRun': grpc.unary_unary_rpc_method_handler(
                    servicer.PostSystemRun,
                    request_deserializer=communication__pb2.CommonRequest.FromString,
                    response_serializer=communication__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'communication.RobotComm', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('communication.RobotComm', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RobotComm(object):
    """机器人信息
    """

    @staticmethod
    def GetBlood(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/GetBlood',
            communication__pb2.CommonRequest.SerializeToString,
            communication__pb2.Blood.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBullet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/GetBullet',
            communication__pb2.CommonRequest.SerializeToString,
            communication__pb2.Bullet.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPosture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/GetPosture',
            communication__pb2.CommonRequest.SerializeToString,
            communication__pb2.Posture.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGimbalYaw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/GetGimbalYaw',
            communication__pb2.CommonRequest.SerializeToString,
            communication__pb2.GimbalYaw.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/GetVelocity',
            communication__pb2.CommonRequest.SerializeToString,
            communication__pb2.Velocity.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAttacked(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/GetAttacked',
            communication__pb2.CommonRequest.SerializeToString,
            communication__pb2.Attacked.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetObjectDection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/GetObjectDection',
            communication__pb2.CommonRequest.SerializeToString,
            communication__pb2.ObjectDection.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PostBlood(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/PostBlood',
            communication__pb2.Blood.SerializeToString,
            communication__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PostBullet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/PostBullet',
            communication__pb2.Bullet.SerializeToString,
            communication__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PostDestination(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/PostDestination',
            communication__pb2.Destination.SerializeToString,
            communication__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PostFricWheel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/PostFricWheel',
            communication__pb2.FricWheel.SerializeToString,
            communication__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PostChassisStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/PostChassisStop',
            communication__pb2.ChassisStop.SerializeToString,
            communication__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PostShooter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/PostShooter',
            communication__pb2.Shooter.SerializeToString,
            communication__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PostSystemRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/communication.RobotComm/PostSystemRun',
            communication__pb2.CommonRequest.SerializeToString,
            communication__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
