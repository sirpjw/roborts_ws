// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle_layer_setting.proto

#include "obstacle_layer_setting.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace roborts_costmap {
PROTOBUF_CONSTEXPR ParaObstacleLayer::ParaObstacleLayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topic_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sensor_frame_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.observation_keep_time_)*/0
  , /*decltype(_impl_.expected_update_rate_)*/0
  , /*decltype(_impl_.min_obstacle_height_)*/0
  , /*decltype(_impl_.max_obstacle_height_)*/0
  , /*decltype(_impl_.obstacle_range_)*/0
  , /*decltype(_impl_.raytrace_range_)*/0
  , /*decltype(_impl_.transform_tolerance_)*/0
  , /*decltype(_impl_.inf_is_valid_)*/false
  , /*decltype(_impl_.clearing_)*/false
  , /*decltype(_impl_.marking_)*/false
  , /*decltype(_impl_.footprint_clearing_enabled_)*/false
  , /*decltype(_impl_.is_debug_)*/false} {}
struct ParaObstacleLayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParaObstacleLayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParaObstacleLayerDefaultTypeInternal() {}
  union {
    ParaObstacleLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParaObstacleLayerDefaultTypeInternal _ParaObstacleLayer_default_instance_;
}  // namespace roborts_costmap
static ::_pb::Metadata file_level_metadata_obstacle_5flayer_5fsetting_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_obstacle_5flayer_5fsetting_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_obstacle_5flayer_5fsetting_2eproto = nullptr;

const uint32_t TableStruct_obstacle_5flayer_5fsetting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.observation_keep_time_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.expected_update_rate_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.min_obstacle_height_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.max_obstacle_height_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.obstacle_range_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.raytrace_range_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.transform_tolerance_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.topic_string_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.sensor_frame_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.inf_is_valid_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.clearing_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.marking_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.footprint_clearing_enabled_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaObstacleLayer, _impl_.is_debug_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  9,
  10,
  11,
  12,
  13,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, -1, sizeof(::roborts_costmap::ParaObstacleLayer)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::roborts_costmap::_ParaObstacleLayer_default_instance_._instance,
};

const char descriptor_table_protodef_obstacle_5flayer_5fsetting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034obstacle_layer_setting.proto\022\017roborts_"
  "costmap\"\362\002\n\021ParaObstacleLayer\022\035\n\025observa"
  "tion_keep_time\030\001 \002(\001\022\034\n\024expected_update_"
  "rate\030\002 \002(\001\022\033\n\023min_obstacle_height\030\003 \002(\001\022"
  "\033\n\023max_obstacle_height\030\004 \002(\001\022\026\n\016obstacle"
  "_range\030\005 \002(\001\022\026\n\016raytrace_range\030\006 \002(\001\022\033\n\023"
  "transform_tolerance\030\007 \002(\001\022\024\n\014topic_strin"
  "g\030\010 \002(\t\022\024\n\014sensor_frame\030\t \002(\t\022\024\n\014inf_is_"
  "valid\030\n \002(\010\022\020\n\010clearing\030\013 \002(\010\022\017\n\007marking"
  "\030\014 \002(\010\022\"\n\032footprint_clearing_enabled\030\r \002"
  "(\010\022\020\n\010is_debug\030\016 \002(\010"
  ;
static ::_pbi::once_flag descriptor_table_obstacle_5flayer_5fsetting_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_obstacle_5flayer_5fsetting_2eproto = {
    false, false, 420, descriptor_table_protodef_obstacle_5flayer_5fsetting_2eproto,
    "obstacle_layer_setting.proto",
    &descriptor_table_obstacle_5flayer_5fsetting_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_obstacle_5flayer_5fsetting_2eproto::offsets,
    file_level_metadata_obstacle_5flayer_5fsetting_2eproto, file_level_enum_descriptors_obstacle_5flayer_5fsetting_2eproto,
    file_level_service_descriptors_obstacle_5flayer_5fsetting_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_obstacle_5flayer_5fsetting_2eproto_getter() {
  return &descriptor_table_obstacle_5flayer_5fsetting_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_obstacle_5flayer_5fsetting_2eproto(&descriptor_table_obstacle_5flayer_5fsetting_2eproto);
namespace roborts_costmap {

// ===================================================================

class ParaObstacleLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<ParaObstacleLayer>()._impl_._has_bits_);
  static void set_has_observation_keep_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_expected_update_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_obstacle_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_obstacle_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_obstacle_range(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_raytrace_range(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_transform_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_topic_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sensor_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inf_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_clearing(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_marking(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_footprint_clearing_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00003fff) ^ 0x00003fff) != 0;
  }
};

ParaObstacleLayer::ParaObstacleLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roborts_costmap.ParaObstacleLayer)
}
ParaObstacleLayer::ParaObstacleLayer(const ParaObstacleLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParaObstacleLayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_string_){}
    , decltype(_impl_.sensor_frame_){}
    , decltype(_impl_.observation_keep_time_){}
    , decltype(_impl_.expected_update_rate_){}
    , decltype(_impl_.min_obstacle_height_){}
    , decltype(_impl_.max_obstacle_height_){}
    , decltype(_impl_.obstacle_range_){}
    , decltype(_impl_.raytrace_range_){}
    , decltype(_impl_.transform_tolerance_){}
    , decltype(_impl_.inf_is_valid_){}
    , decltype(_impl_.clearing_){}
    , decltype(_impl_.marking_){}
    , decltype(_impl_.footprint_clearing_enabled_){}
    , decltype(_impl_.is_debug_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_topic_string()) {
    _this->_impl_.topic_string_.Set(from._internal_topic_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sensor_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sensor_frame()) {
    _this->_impl_.sensor_frame_.Set(from._internal_sensor_frame(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.observation_keep_time_, &from._impl_.observation_keep_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_debug_) -
    reinterpret_cast<char*>(&_impl_.observation_keep_time_)) + sizeof(_impl_.is_debug_));
  // @@protoc_insertion_point(copy_constructor:roborts_costmap.ParaObstacleLayer)
}

inline void ParaObstacleLayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_string_){}
    , decltype(_impl_.sensor_frame_){}
    , decltype(_impl_.observation_keep_time_){0}
    , decltype(_impl_.expected_update_rate_){0}
    , decltype(_impl_.min_obstacle_height_){0}
    , decltype(_impl_.max_obstacle_height_){0}
    , decltype(_impl_.obstacle_range_){0}
    , decltype(_impl_.raytrace_range_){0}
    , decltype(_impl_.transform_tolerance_){0}
    , decltype(_impl_.inf_is_valid_){false}
    , decltype(_impl_.clearing_){false}
    , decltype(_impl_.marking_){false}
    , decltype(_impl_.footprint_clearing_enabled_){false}
    , decltype(_impl_.is_debug_){false}
  };
  _impl_.topic_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sensor_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParaObstacleLayer::~ParaObstacleLayer() {
  // @@protoc_insertion_point(destructor:roborts_costmap.ParaObstacleLayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParaObstacleLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_string_.Destroy();
  _impl_.sensor_frame_.Destroy();
}

void ParaObstacleLayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParaObstacleLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_costmap.ParaObstacleLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.topic_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sensor_frame_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.observation_keep_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.raytrace_range_) -
        reinterpret_cast<char*>(&_impl_.observation_keep_time_)) + sizeof(_impl_.raytrace_range_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.transform_tolerance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_debug_) -
        reinterpret_cast<char*>(&_impl_.transform_tolerance_)) + sizeof(_impl_.is_debug_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParaObstacleLayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double observation_keep_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_observation_keep_time(&has_bits);
          _impl_.observation_keep_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double expected_update_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_expected_update_rate(&has_bits);
          _impl_.expected_update_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double min_obstacle_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_min_obstacle_height(&has_bits);
          _impl_.min_obstacle_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double max_obstacle_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_max_obstacle_height(&has_bits);
          _impl_.max_obstacle_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double obstacle_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_obstacle_range(&has_bits);
          _impl_.obstacle_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double raytrace_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_raytrace_range(&has_bits);
          _impl_.raytrace_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double transform_tolerance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_transform_tolerance(&has_bits);
          _impl_.transform_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required string topic_string = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_topic_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "roborts_costmap.ParaObstacleLayer.topic_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string sensor_frame = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sensor_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "roborts_costmap.ParaObstacleLayer.sensor_frame");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool inf_is_valid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_inf_is_valid(&has_bits);
          _impl_.inf_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool clearing = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_clearing(&has_bits);
          _impl_.clearing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool marking = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_marking(&has_bits);
          _impl_.marking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool footprint_clearing_enabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_footprint_clearing_enabled(&has_bits);
          _impl_.footprint_clearing_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_debug = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_is_debug(&has_bits);
          _impl_.is_debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParaObstacleLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_costmap.ParaObstacleLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double observation_keep_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_observation_keep_time(), target);
  }

  // required double expected_update_rate = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_expected_update_rate(), target);
  }

  // required double min_obstacle_height = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_obstacle_height(), target);
  }

  // required double max_obstacle_height = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_obstacle_height(), target);
  }

  // required double obstacle_range = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_obstacle_range(), target);
  }

  // required double raytrace_range = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_raytrace_range(), target);
  }

  // required double transform_tolerance = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_transform_tolerance(), target);
  }

  // required string topic_string = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topic_string().data(), static_cast<int>(this->_internal_topic_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "roborts_costmap.ParaObstacleLayer.topic_string");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_topic_string(), target);
  }

  // required string sensor_frame = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sensor_frame().data(), static_cast<int>(this->_internal_sensor_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "roborts_costmap.ParaObstacleLayer.sensor_frame");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sensor_frame(), target);
  }

  // required bool inf_is_valid = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_inf_is_valid(), target);
  }

  // required bool clearing = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_clearing(), target);
  }

  // required bool marking = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_marking(), target);
  }

  // required bool footprint_clearing_enabled = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_footprint_clearing_enabled(), target);
  }

  // required bool is_debug = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_is_debug(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_costmap.ParaObstacleLayer)
  return target;
}

size_t ParaObstacleLayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_costmap.ParaObstacleLayer)
  size_t total_size = 0;

  if (_internal_has_topic_string()) {
    // required string topic_string = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic_string());
  }

  if (_internal_has_sensor_frame()) {
    // required string sensor_frame = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_frame());
  }

  if (_internal_has_observation_keep_time()) {
    // required double observation_keep_time = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_expected_update_rate()) {
    // required double expected_update_rate = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_min_obstacle_height()) {
    // required double min_obstacle_height = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_max_obstacle_height()) {
    // required double max_obstacle_height = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_obstacle_range()) {
    // required double obstacle_range = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_raytrace_range()) {
    // required double raytrace_range = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_transform_tolerance()) {
    // required double transform_tolerance = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_inf_is_valid()) {
    // required bool inf_is_valid = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_clearing()) {
    // required bool clearing = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_marking()) {
    // required bool marking = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_footprint_clearing_enabled()) {
    // required bool footprint_clearing_enabled = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_is_debug()) {
    // required bool is_debug = 14;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ParaObstacleLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_costmap.ParaObstacleLayer)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required string topic_string = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic_string());

    // required string sensor_frame = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_frame());

    // required double observation_keep_time = 1;
    total_size += 1 + 8;

    // required double expected_update_rate = 2;
    total_size += 1 + 8;

    // required double min_obstacle_height = 3;
    total_size += 1 + 8;

    // required double max_obstacle_height = 4;
    total_size += 1 + 8;

    // required double obstacle_range = 5;
    total_size += 1 + 8;

    // required double raytrace_range = 6;
    total_size += 1 + 8;

    // required double transform_tolerance = 7;
    total_size += 1 + 8;

    // required bool inf_is_valid = 10;
    total_size += 1 + 1;

    // required bool clearing = 11;
    total_size += 1 + 1;

    // required bool marking = 12;
    total_size += 1 + 1;

    // required bool footprint_clearing_enabled = 13;
    total_size += 1 + 1;

    // required bool is_debug = 14;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParaObstacleLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParaObstacleLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParaObstacleLayer::GetClassData() const { return &_class_data_; }


void ParaObstacleLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParaObstacleLayer*>(&to_msg);
  auto& from = static_cast<const ParaObstacleLayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roborts_costmap.ParaObstacleLayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_topic_string(from._internal_topic_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sensor_frame(from._internal_sensor_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.observation_keep_time_ = from._impl_.observation_keep_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.expected_update_rate_ = from._impl_.expected_update_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.min_obstacle_height_ = from._impl_.min_obstacle_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.max_obstacle_height_ = from._impl_.max_obstacle_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.obstacle_range_ = from._impl_.obstacle_range_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.raytrace_range_ = from._impl_.raytrace_range_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.transform_tolerance_ = from._impl_.transform_tolerance_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.inf_is_valid_ = from._impl_.inf_is_valid_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.clearing_ = from._impl_.clearing_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.marking_ = from._impl_.marking_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.footprint_clearing_enabled_ = from._impl_.footprint_clearing_enabled_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.is_debug_ = from._impl_.is_debug_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParaObstacleLayer::CopyFrom(const ParaObstacleLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_costmap.ParaObstacleLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaObstacleLayer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ParaObstacleLayer::InternalSwap(ParaObstacleLayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_string_, lhs_arena,
      &other->_impl_.topic_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensor_frame_, lhs_arena,
      &other->_impl_.sensor_frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParaObstacleLayer, _impl_.is_debug_)
      + sizeof(ParaObstacleLayer::_impl_.is_debug_)
      - PROTOBUF_FIELD_OFFSET(ParaObstacleLayer, _impl_.observation_keep_time_)>(
          reinterpret_cast<char*>(&_impl_.observation_keep_time_),
          reinterpret_cast<char*>(&other->_impl_.observation_keep_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParaObstacleLayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_obstacle_5flayer_5fsetting_2eproto_getter, &descriptor_table_obstacle_5flayer_5fsetting_2eproto_once,
      file_level_metadata_obstacle_5flayer_5fsetting_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace roborts_costmap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::roborts_costmap::ParaObstacleLayer*
Arena::CreateMaybeMessage< ::roborts_costmap::ParaObstacleLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roborts_costmap::ParaObstacleLayer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
