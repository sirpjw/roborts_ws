// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle_layer_setting.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_obstacle_5flayer_5fsetting_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_obstacle_5flayer_5fsetting_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_obstacle_5flayer_5fsetting_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_obstacle_5flayer_5fsetting_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacle_5flayer_5fsetting_2eproto;
namespace roborts_costmap {
class ParaObstacleLayer;
struct ParaObstacleLayerDefaultTypeInternal;
extern ParaObstacleLayerDefaultTypeInternal _ParaObstacleLayer_default_instance_;
}  // namespace roborts_costmap
PROTOBUF_NAMESPACE_OPEN
template<> ::roborts_costmap::ParaObstacleLayer* Arena::CreateMaybeMessage<::roborts_costmap::ParaObstacleLayer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace roborts_costmap {

// ===================================================================

class ParaObstacleLayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roborts_costmap.ParaObstacleLayer) */ {
 public:
  inline ParaObstacleLayer() : ParaObstacleLayer(nullptr) {}
  ~ParaObstacleLayer() override;
  explicit PROTOBUF_CONSTEXPR ParaObstacleLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParaObstacleLayer(const ParaObstacleLayer& from);
  ParaObstacleLayer(ParaObstacleLayer&& from) noexcept
    : ParaObstacleLayer() {
    *this = ::std::move(from);
  }

  inline ParaObstacleLayer& operator=(const ParaObstacleLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParaObstacleLayer& operator=(ParaObstacleLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParaObstacleLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParaObstacleLayer* internal_default_instance() {
    return reinterpret_cast<const ParaObstacleLayer*>(
               &_ParaObstacleLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParaObstacleLayer& a, ParaObstacleLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ParaObstacleLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParaObstacleLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParaObstacleLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParaObstacleLayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParaObstacleLayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ParaObstacleLayer& from) {
    ParaObstacleLayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParaObstacleLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roborts_costmap.ParaObstacleLayer";
  }
  protected:
  explicit ParaObstacleLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicStringFieldNumber = 8,
    kSensorFrameFieldNumber = 9,
    kObservationKeepTimeFieldNumber = 1,
    kExpectedUpdateRateFieldNumber = 2,
    kMinObstacleHeightFieldNumber = 3,
    kMaxObstacleHeightFieldNumber = 4,
    kObstacleRangeFieldNumber = 5,
    kRaytraceRangeFieldNumber = 6,
    kTransformToleranceFieldNumber = 7,
    kInfIsValidFieldNumber = 10,
    kClearingFieldNumber = 11,
    kMarkingFieldNumber = 12,
    kFootprintClearingEnabledFieldNumber = 13,
    kIsDebugFieldNumber = 14,
  };
  // required string topic_string = 8;
  bool has_topic_string() const;
  private:
  bool _internal_has_topic_string() const;
  public:
  void clear_topic_string();
  const std::string& topic_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic_string();
  PROTOBUF_NODISCARD std::string* release_topic_string();
  void set_allocated_topic_string(std::string* topic_string);
  private:
  const std::string& _internal_topic_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_string(const std::string& value);
  std::string* _internal_mutable_topic_string();
  public:

  // required string sensor_frame = 9;
  bool has_sensor_frame() const;
  private:
  bool _internal_has_sensor_frame() const;
  public:
  void clear_sensor_frame();
  const std::string& sensor_frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sensor_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sensor_frame();
  PROTOBUF_NODISCARD std::string* release_sensor_frame();
  void set_allocated_sensor_frame(std::string* sensor_frame);
  private:
  const std::string& _internal_sensor_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensor_frame(const std::string& value);
  std::string* _internal_mutable_sensor_frame();
  public:

  // required double observation_keep_time = 1;
  bool has_observation_keep_time() const;
  private:
  bool _internal_has_observation_keep_time() const;
  public:
  void clear_observation_keep_time();
  double observation_keep_time() const;
  void set_observation_keep_time(double value);
  private:
  double _internal_observation_keep_time() const;
  void _internal_set_observation_keep_time(double value);
  public:

  // required double expected_update_rate = 2;
  bool has_expected_update_rate() const;
  private:
  bool _internal_has_expected_update_rate() const;
  public:
  void clear_expected_update_rate();
  double expected_update_rate() const;
  void set_expected_update_rate(double value);
  private:
  double _internal_expected_update_rate() const;
  void _internal_set_expected_update_rate(double value);
  public:

  // required double min_obstacle_height = 3;
  bool has_min_obstacle_height() const;
  private:
  bool _internal_has_min_obstacle_height() const;
  public:
  void clear_min_obstacle_height();
  double min_obstacle_height() const;
  void set_min_obstacle_height(double value);
  private:
  double _internal_min_obstacle_height() const;
  void _internal_set_min_obstacle_height(double value);
  public:

  // required double max_obstacle_height = 4;
  bool has_max_obstacle_height() const;
  private:
  bool _internal_has_max_obstacle_height() const;
  public:
  void clear_max_obstacle_height();
  double max_obstacle_height() const;
  void set_max_obstacle_height(double value);
  private:
  double _internal_max_obstacle_height() const;
  void _internal_set_max_obstacle_height(double value);
  public:

  // required double obstacle_range = 5;
  bool has_obstacle_range() const;
  private:
  bool _internal_has_obstacle_range() const;
  public:
  void clear_obstacle_range();
  double obstacle_range() const;
  void set_obstacle_range(double value);
  private:
  double _internal_obstacle_range() const;
  void _internal_set_obstacle_range(double value);
  public:

  // required double raytrace_range = 6;
  bool has_raytrace_range() const;
  private:
  bool _internal_has_raytrace_range() const;
  public:
  void clear_raytrace_range();
  double raytrace_range() const;
  void set_raytrace_range(double value);
  private:
  double _internal_raytrace_range() const;
  void _internal_set_raytrace_range(double value);
  public:

  // required double transform_tolerance = 7;
  bool has_transform_tolerance() const;
  private:
  bool _internal_has_transform_tolerance() const;
  public:
  void clear_transform_tolerance();
  double transform_tolerance() const;
  void set_transform_tolerance(double value);
  private:
  double _internal_transform_tolerance() const;
  void _internal_set_transform_tolerance(double value);
  public:

  // required bool inf_is_valid = 10;
  bool has_inf_is_valid() const;
  private:
  bool _internal_has_inf_is_valid() const;
  public:
  void clear_inf_is_valid();
  bool inf_is_valid() const;
  void set_inf_is_valid(bool value);
  private:
  bool _internal_inf_is_valid() const;
  void _internal_set_inf_is_valid(bool value);
  public:

  // required bool clearing = 11;
  bool has_clearing() const;
  private:
  bool _internal_has_clearing() const;
  public:
  void clear_clearing();
  bool clearing() const;
  void set_clearing(bool value);
  private:
  bool _internal_clearing() const;
  void _internal_set_clearing(bool value);
  public:

  // required bool marking = 12;
  bool has_marking() const;
  private:
  bool _internal_has_marking() const;
  public:
  void clear_marking();
  bool marking() const;
  void set_marking(bool value);
  private:
  bool _internal_marking() const;
  void _internal_set_marking(bool value);
  public:

  // required bool footprint_clearing_enabled = 13;
  bool has_footprint_clearing_enabled() const;
  private:
  bool _internal_has_footprint_clearing_enabled() const;
  public:
  void clear_footprint_clearing_enabled();
  bool footprint_clearing_enabled() const;
  void set_footprint_clearing_enabled(bool value);
  private:
  bool _internal_footprint_clearing_enabled() const;
  void _internal_set_footprint_clearing_enabled(bool value);
  public:

  // required bool is_debug = 14;
  bool has_is_debug() const;
  private:
  bool _internal_has_is_debug() const;
  public:
  void clear_is_debug();
  bool is_debug() const;
  void set_is_debug(bool value);
  private:
  bool _internal_is_debug() const;
  void _internal_set_is_debug(bool value);
  public:

  // @@protoc_insertion_point(class_scope:roborts_costmap.ParaObstacleLayer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensor_frame_;
    double observation_keep_time_;
    double expected_update_rate_;
    double min_obstacle_height_;
    double max_obstacle_height_;
    double obstacle_range_;
    double raytrace_range_;
    double transform_tolerance_;
    bool inf_is_valid_;
    bool clearing_;
    bool marking_;
    bool footprint_clearing_enabled_;
    bool is_debug_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_obstacle_5flayer_5fsetting_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParaObstacleLayer

// required double observation_keep_time = 1;
inline bool ParaObstacleLayer::_internal_has_observation_keep_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_observation_keep_time() const {
  return _internal_has_observation_keep_time();
}
inline void ParaObstacleLayer::clear_observation_keep_time() {
  _impl_.observation_keep_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ParaObstacleLayer::_internal_observation_keep_time() const {
  return _impl_.observation_keep_time_;
}
inline double ParaObstacleLayer::observation_keep_time() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.observation_keep_time)
  return _internal_observation_keep_time();
}
inline void ParaObstacleLayer::_internal_set_observation_keep_time(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.observation_keep_time_ = value;
}
inline void ParaObstacleLayer::set_observation_keep_time(double value) {
  _internal_set_observation_keep_time(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.observation_keep_time)
}

// required double expected_update_rate = 2;
inline bool ParaObstacleLayer::_internal_has_expected_update_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_expected_update_rate() const {
  return _internal_has_expected_update_rate();
}
inline void ParaObstacleLayer::clear_expected_update_rate() {
  _impl_.expected_update_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ParaObstacleLayer::_internal_expected_update_rate() const {
  return _impl_.expected_update_rate_;
}
inline double ParaObstacleLayer::expected_update_rate() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.expected_update_rate)
  return _internal_expected_update_rate();
}
inline void ParaObstacleLayer::_internal_set_expected_update_rate(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.expected_update_rate_ = value;
}
inline void ParaObstacleLayer::set_expected_update_rate(double value) {
  _internal_set_expected_update_rate(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.expected_update_rate)
}

// required double min_obstacle_height = 3;
inline bool ParaObstacleLayer::_internal_has_min_obstacle_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_min_obstacle_height() const {
  return _internal_has_min_obstacle_height();
}
inline void ParaObstacleLayer::clear_min_obstacle_height() {
  _impl_.min_obstacle_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ParaObstacleLayer::_internal_min_obstacle_height() const {
  return _impl_.min_obstacle_height_;
}
inline double ParaObstacleLayer::min_obstacle_height() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.min_obstacle_height)
  return _internal_min_obstacle_height();
}
inline void ParaObstacleLayer::_internal_set_min_obstacle_height(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.min_obstacle_height_ = value;
}
inline void ParaObstacleLayer::set_min_obstacle_height(double value) {
  _internal_set_min_obstacle_height(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.min_obstacle_height)
}

// required double max_obstacle_height = 4;
inline bool ParaObstacleLayer::_internal_has_max_obstacle_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_max_obstacle_height() const {
  return _internal_has_max_obstacle_height();
}
inline void ParaObstacleLayer::clear_max_obstacle_height() {
  _impl_.max_obstacle_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double ParaObstacleLayer::_internal_max_obstacle_height() const {
  return _impl_.max_obstacle_height_;
}
inline double ParaObstacleLayer::max_obstacle_height() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.max_obstacle_height)
  return _internal_max_obstacle_height();
}
inline void ParaObstacleLayer::_internal_set_max_obstacle_height(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_obstacle_height_ = value;
}
inline void ParaObstacleLayer::set_max_obstacle_height(double value) {
  _internal_set_max_obstacle_height(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.max_obstacle_height)
}

// required double obstacle_range = 5;
inline bool ParaObstacleLayer::_internal_has_obstacle_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_obstacle_range() const {
  return _internal_has_obstacle_range();
}
inline void ParaObstacleLayer::clear_obstacle_range() {
  _impl_.obstacle_range_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double ParaObstacleLayer::_internal_obstacle_range() const {
  return _impl_.obstacle_range_;
}
inline double ParaObstacleLayer::obstacle_range() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.obstacle_range)
  return _internal_obstacle_range();
}
inline void ParaObstacleLayer::_internal_set_obstacle_range(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.obstacle_range_ = value;
}
inline void ParaObstacleLayer::set_obstacle_range(double value) {
  _internal_set_obstacle_range(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.obstacle_range)
}

// required double raytrace_range = 6;
inline bool ParaObstacleLayer::_internal_has_raytrace_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_raytrace_range() const {
  return _internal_has_raytrace_range();
}
inline void ParaObstacleLayer::clear_raytrace_range() {
  _impl_.raytrace_range_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double ParaObstacleLayer::_internal_raytrace_range() const {
  return _impl_.raytrace_range_;
}
inline double ParaObstacleLayer::raytrace_range() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.raytrace_range)
  return _internal_raytrace_range();
}
inline void ParaObstacleLayer::_internal_set_raytrace_range(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.raytrace_range_ = value;
}
inline void ParaObstacleLayer::set_raytrace_range(double value) {
  _internal_set_raytrace_range(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.raytrace_range)
}

// required double transform_tolerance = 7;
inline bool ParaObstacleLayer::_internal_has_transform_tolerance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_transform_tolerance() const {
  return _internal_has_transform_tolerance();
}
inline void ParaObstacleLayer::clear_transform_tolerance() {
  _impl_.transform_tolerance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double ParaObstacleLayer::_internal_transform_tolerance() const {
  return _impl_.transform_tolerance_;
}
inline double ParaObstacleLayer::transform_tolerance() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.transform_tolerance)
  return _internal_transform_tolerance();
}
inline void ParaObstacleLayer::_internal_set_transform_tolerance(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.transform_tolerance_ = value;
}
inline void ParaObstacleLayer::set_transform_tolerance(double value) {
  _internal_set_transform_tolerance(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.transform_tolerance)
}

// required string topic_string = 8;
inline bool ParaObstacleLayer::_internal_has_topic_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_topic_string() const {
  return _internal_has_topic_string();
}
inline void ParaObstacleLayer::clear_topic_string() {
  _impl_.topic_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParaObstacleLayer::topic_string() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.topic_string)
  return _internal_topic_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParaObstacleLayer::set_topic_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.topic_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.topic_string)
}
inline std::string* ParaObstacleLayer::mutable_topic_string() {
  std::string* _s = _internal_mutable_topic_string();
  // @@protoc_insertion_point(field_mutable:roborts_costmap.ParaObstacleLayer.topic_string)
  return _s;
}
inline const std::string& ParaObstacleLayer::_internal_topic_string() const {
  return _impl_.topic_string_.Get();
}
inline void ParaObstacleLayer::_internal_set_topic_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.topic_string_.Set(value, GetArenaForAllocation());
}
inline std::string* ParaObstacleLayer::_internal_mutable_topic_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.topic_string_.Mutable(GetArenaForAllocation());
}
inline std::string* ParaObstacleLayer::release_topic_string() {
  // @@protoc_insertion_point(field_release:roborts_costmap.ParaObstacleLayer.topic_string)
  if (!_internal_has_topic_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.topic_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_string_.IsDefault()) {
    _impl_.topic_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParaObstacleLayer::set_allocated_topic_string(std::string* topic_string) {
  if (topic_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.topic_string_.SetAllocated(topic_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_string_.IsDefault()) {
    _impl_.topic_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:roborts_costmap.ParaObstacleLayer.topic_string)
}

// required string sensor_frame = 9;
inline bool ParaObstacleLayer::_internal_has_sensor_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_sensor_frame() const {
  return _internal_has_sensor_frame();
}
inline void ParaObstacleLayer::clear_sensor_frame() {
  _impl_.sensor_frame_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ParaObstacleLayer::sensor_frame() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.sensor_frame)
  return _internal_sensor_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParaObstacleLayer::set_sensor_frame(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.sensor_frame_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.sensor_frame)
}
inline std::string* ParaObstacleLayer::mutable_sensor_frame() {
  std::string* _s = _internal_mutable_sensor_frame();
  // @@protoc_insertion_point(field_mutable:roborts_costmap.ParaObstacleLayer.sensor_frame)
  return _s;
}
inline const std::string& ParaObstacleLayer::_internal_sensor_frame() const {
  return _impl_.sensor_frame_.Get();
}
inline void ParaObstacleLayer::_internal_set_sensor_frame(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sensor_frame_.Set(value, GetArenaForAllocation());
}
inline std::string* ParaObstacleLayer::_internal_mutable_sensor_frame() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.sensor_frame_.Mutable(GetArenaForAllocation());
}
inline std::string* ParaObstacleLayer::release_sensor_frame() {
  // @@protoc_insertion_point(field_release:roborts_costmap.ParaObstacleLayer.sensor_frame)
  if (!_internal_has_sensor_frame()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.sensor_frame_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sensor_frame_.IsDefault()) {
    _impl_.sensor_frame_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParaObstacleLayer::set_allocated_sensor_frame(std::string* sensor_frame) {
  if (sensor_frame != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sensor_frame_.SetAllocated(sensor_frame, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sensor_frame_.IsDefault()) {
    _impl_.sensor_frame_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:roborts_costmap.ParaObstacleLayer.sensor_frame)
}

// required bool inf_is_valid = 10;
inline bool ParaObstacleLayer::_internal_has_inf_is_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_inf_is_valid() const {
  return _internal_has_inf_is_valid();
}
inline void ParaObstacleLayer::clear_inf_is_valid() {
  _impl_.inf_is_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool ParaObstacleLayer::_internal_inf_is_valid() const {
  return _impl_.inf_is_valid_;
}
inline bool ParaObstacleLayer::inf_is_valid() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.inf_is_valid)
  return _internal_inf_is_valid();
}
inline void ParaObstacleLayer::_internal_set_inf_is_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.inf_is_valid_ = value;
}
inline void ParaObstacleLayer::set_inf_is_valid(bool value) {
  _internal_set_inf_is_valid(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.inf_is_valid)
}

// required bool clearing = 11;
inline bool ParaObstacleLayer::_internal_has_clearing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_clearing() const {
  return _internal_has_clearing();
}
inline void ParaObstacleLayer::clear_clearing() {
  _impl_.clearing_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool ParaObstacleLayer::_internal_clearing() const {
  return _impl_.clearing_;
}
inline bool ParaObstacleLayer::clearing() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.clearing)
  return _internal_clearing();
}
inline void ParaObstacleLayer::_internal_set_clearing(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.clearing_ = value;
}
inline void ParaObstacleLayer::set_clearing(bool value) {
  _internal_set_clearing(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.clearing)
}

// required bool marking = 12;
inline bool ParaObstacleLayer::_internal_has_marking() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_marking() const {
  return _internal_has_marking();
}
inline void ParaObstacleLayer::clear_marking() {
  _impl_.marking_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ParaObstacleLayer::_internal_marking() const {
  return _impl_.marking_;
}
inline bool ParaObstacleLayer::marking() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.marking)
  return _internal_marking();
}
inline void ParaObstacleLayer::_internal_set_marking(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.marking_ = value;
}
inline void ParaObstacleLayer::set_marking(bool value) {
  _internal_set_marking(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.marking)
}

// required bool footprint_clearing_enabled = 13;
inline bool ParaObstacleLayer::_internal_has_footprint_clearing_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_footprint_clearing_enabled() const {
  return _internal_has_footprint_clearing_enabled();
}
inline void ParaObstacleLayer::clear_footprint_clearing_enabled() {
  _impl_.footprint_clearing_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool ParaObstacleLayer::_internal_footprint_clearing_enabled() const {
  return _impl_.footprint_clearing_enabled_;
}
inline bool ParaObstacleLayer::footprint_clearing_enabled() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.footprint_clearing_enabled)
  return _internal_footprint_clearing_enabled();
}
inline void ParaObstacleLayer::_internal_set_footprint_clearing_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.footprint_clearing_enabled_ = value;
}
inline void ParaObstacleLayer::set_footprint_clearing_enabled(bool value) {
  _internal_set_footprint_clearing_enabled(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.footprint_clearing_enabled)
}

// required bool is_debug = 14;
inline bool ParaObstacleLayer::_internal_has_is_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ParaObstacleLayer::has_is_debug() const {
  return _internal_has_is_debug();
}
inline void ParaObstacleLayer::clear_is_debug() {
  _impl_.is_debug_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool ParaObstacleLayer::_internal_is_debug() const {
  return _impl_.is_debug_;
}
inline bool ParaObstacleLayer::is_debug() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.is_debug)
  return _internal_is_debug();
}
inline void ParaObstacleLayer::_internal_set_is_debug(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.is_debug_ = value;
}
inline void ParaObstacleLayer::set_is_debug(bool value) {
  _internal_set_is_debug(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.is_debug)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_costmap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_obstacle_5flayer_5fsetting_2eproto
