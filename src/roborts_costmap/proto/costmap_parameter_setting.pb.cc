// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: costmap_parameter_setting.proto

#include "costmap_parameter_setting.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace roborts_costmap {
PROTOBUF_CONSTEXPR ParaBasic::ParaBasic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.is_raw_rosmessage_)*/false
  , /*decltype(_impl_.is_debug_)*/false} {}
struct ParaBasicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParaBasicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParaBasicDefaultTypeInternal() {}
  union {
    ParaBasic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParaBasicDefaultTypeInternal _ParaBasic_default_instance_;
PROTOBUF_CONSTEXPR ParaCostmapInterface::ParaCostmapInterface(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.global_frame_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.robot_base_frame_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inflation_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.footprint_padding_)*/0
  , /*decltype(_impl_.transform_tolerance_)*/0
  , /*decltype(_impl_.distance_threshold_)*/0
  , /*decltype(_impl_.map_width_)*/0
  , /*decltype(_impl_.map_height_)*/0
  , /*decltype(_impl_.map_origin_x_)*/0
  , /*decltype(_impl_.map_origin_y_)*/0
  , /*decltype(_impl_.map_resolution_)*/0
  , /*decltype(_impl_.map_update_frequency_)*/0
  , /*decltype(_impl_.is_tracking_unknown_)*/false
  , /*decltype(_impl_.is_rolling_window_)*/false
  , /*decltype(_impl_.has_obstacle_layer_)*/false
  , /*decltype(_impl_.has_static_layer_)*/false} {}
struct ParaCostmapInterfaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParaCostmapInterfaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParaCostmapInterfaceDefaultTypeInternal() {}
  union {
    ParaCostmapInterface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParaCostmapInterfaceDefaultTypeInternal _ParaCostmapInterface_default_instance_;
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR Footprint::Footprint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FootprintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FootprintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FootprintDefaultTypeInternal() {}
  union {
    Footprint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FootprintDefaultTypeInternal _Footprint_default_instance_;
PROTOBUF_CONSTEXPR ParaCollection::ParaCollection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.para_costmap_interface_)*/nullptr
  , /*decltype(_impl_.footprint_)*/nullptr
  , /*decltype(_impl_.para_basic_)*/nullptr} {}
struct ParaCollectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParaCollectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParaCollectionDefaultTypeInternal() {}
  union {
    ParaCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParaCollectionDefaultTypeInternal _ParaCollection_default_instance_;
}  // namespace roborts_costmap
static ::_pb::Metadata file_level_metadata_costmap_5fparameter_5fsetting_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_costmap_5fparameter_5fsetting_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_costmap_5fparameter_5fsetting_2eproto = nullptr;

const uint32_t TableStruct_costmap_5fparameter_5fsetting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaBasic, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaBasic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaBasic, _impl_.is_raw_rosmessage_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaBasic, _impl_.is_debug_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.global_frame_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.robot_base_frame_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.footprint_padding_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.transform_tolerance_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.distance_threshold_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.map_width_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.map_height_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.map_origin_x_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.map_origin_y_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.map_resolution_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.is_tracking_unknown_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.is_rolling_window_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.has_obstacle_layer_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.has_static_layer_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.inflation_file_path_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCostmapInterface, _impl_.map_update_frequency_),
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  12,
  13,
  14,
  15,
  2,
  11,
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::Point, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::Point, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::Point, _impl_.y_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::Footprint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::Footprint, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCollection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCollection, _impl_.para_costmap_interface_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCollection, _impl_.footprint_),
  PROTOBUF_FIELD_OFFSET(::roborts_costmap::ParaCollection, _impl_.para_basic_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::roborts_costmap::ParaBasic)},
  { 10, 32, -1, sizeof(::roborts_costmap::ParaCostmapInterface)},
  { 48, 56, -1, sizeof(::roborts_costmap::Point)},
  { 58, -1, -1, sizeof(::roborts_costmap::Footprint)},
  { 65, 74, -1, sizeof(::roborts_costmap::ParaCollection)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::roborts_costmap::_ParaBasic_default_instance_._instance,
  &::roborts_costmap::_ParaCostmapInterface_default_instance_._instance,
  &::roborts_costmap::_Point_default_instance_._instance,
  &::roborts_costmap::_Footprint_default_instance_._instance,
  &::roborts_costmap::_ParaCollection_default_instance_._instance,
};

const char descriptor_table_protodef_costmap_5fparameter_5fsetting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037costmap_parameter_setting.proto\022\017robor"
  "ts_costmap\"8\n\tParaBasic\022\031\n\021is_raw_rosmes"
  "sage\030\001 \002(\010\022\020\n\010is_debug\030\002 \001(\010\"\256\003\n\024ParaCos"
  "tmapInterface\022\024\n\014global_frame\030\001 \002(\t\022\030\n\020r"
  "obot_base_frame\030\002 \002(\t\022\031\n\021footprint_paddi"
  "ng\030\003 \002(\001\022\033\n\023transform_tolerance\030\004 \002(\001\022\032\n"
  "\022distance_threshold\030\005 \002(\001\022\021\n\tmap_width\030\006"
  " \002(\001\022\022\n\nmap_height\030\007 \002(\001\022\024\n\014map_origin_x"
  "\030\010 \002(\001\022\024\n\014map_origin_y\030\t \002(\001\022\026\n\016map_reso"
  "lution\030\n \002(\001\022\033\n\023is_tracking_unknown\030\013 \002("
  "\010\022\031\n\021is_rolling_window\030\014 \002(\010\022\032\n\022has_obst"
  "acle_layer\030\r \002(\010\022\030\n\020has_static_layer\030\016 \002"
  "(\010\022\033\n\023inflation_file_path\030\017 \002(\t\022\034\n\024map_u"
  "pdate_frequency\030\020 \002(\001\"\035\n\005Point\022\t\n\001x\030\001 \002("
  "\001\022\t\n\001y\030\002 \002(\001\"2\n\tFootprint\022%\n\005point\030\001 \003(\013"
  "2\026.roborts_costmap.Point\"\266\001\n\016ParaCollect"
  "ion\022E\n\026para_costmap_interface\030\001 \002(\0132%.ro"
  "borts_costmap.ParaCostmapInterface\022-\n\tfo"
  "otprint\030\002 \002(\0132\032.roborts_costmap.Footprin"
  "t\022.\n\npara_basic\030\003 \002(\0132\032.roborts_costmap."
  "ParaBasic"
  ;
static ::_pbi::once_flag descriptor_table_costmap_5fparameter_5fsetting_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_costmap_5fparameter_5fsetting_2eproto = {
    false, false, 809, descriptor_table_protodef_costmap_5fparameter_5fsetting_2eproto,
    "costmap_parameter_setting.proto",
    &descriptor_table_costmap_5fparameter_5fsetting_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_costmap_5fparameter_5fsetting_2eproto::offsets,
    file_level_metadata_costmap_5fparameter_5fsetting_2eproto, file_level_enum_descriptors_costmap_5fparameter_5fsetting_2eproto,
    file_level_service_descriptors_costmap_5fparameter_5fsetting_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_costmap_5fparameter_5fsetting_2eproto_getter() {
  return &descriptor_table_costmap_5fparameter_5fsetting_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_costmap_5fparameter_5fsetting_2eproto(&descriptor_table_costmap_5fparameter_5fsetting_2eproto);
namespace roborts_costmap {

// ===================================================================

class ParaBasic::_Internal {
 public:
  using HasBits = decltype(std::declval<ParaBasic>()._impl_._has_bits_);
  static void set_has_is_raw_rosmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ParaBasic::ParaBasic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roborts_costmap.ParaBasic)
}
ParaBasic::ParaBasic(const ParaBasic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParaBasic* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.is_raw_rosmessage_){}
    , decltype(_impl_.is_debug_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_raw_rosmessage_, &from._impl_.is_raw_rosmessage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_debug_) -
    reinterpret_cast<char*>(&_impl_.is_raw_rosmessage_)) + sizeof(_impl_.is_debug_));
  // @@protoc_insertion_point(copy_constructor:roborts_costmap.ParaBasic)
}

inline void ParaBasic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.is_raw_rosmessage_){false}
    , decltype(_impl_.is_debug_){false}
  };
}

ParaBasic::~ParaBasic() {
  // @@protoc_insertion_point(destructor:roborts_costmap.ParaBasic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParaBasic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParaBasic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParaBasic::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_costmap.ParaBasic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.is_raw_rosmessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_debug_) -
      reinterpret_cast<char*>(&_impl_.is_raw_rosmessage_)) + sizeof(_impl_.is_debug_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParaBasic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool is_raw_rosmessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_raw_rosmessage(&has_bits);
          _impl_.is_raw_rosmessage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_debug = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_debug(&has_bits);
          _impl_.is_debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParaBasic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_costmap.ParaBasic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool is_raw_rosmessage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_raw_rosmessage(), target);
  }

  // optional bool is_debug = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_debug(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_costmap.ParaBasic)
  return target;
}

size_t ParaBasic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_costmap.ParaBasic)
  size_t total_size = 0;

  // required bool is_raw_rosmessage = 1;
  if (_internal_has_is_raw_rosmessage()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_debug = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParaBasic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParaBasic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParaBasic::GetClassData() const { return &_class_data_; }


void ParaBasic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParaBasic*>(&to_msg);
  auto& from = static_cast<const ParaBasic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roborts_costmap.ParaBasic)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.is_raw_rosmessage_ = from._impl_.is_raw_rosmessage_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_debug_ = from._impl_.is_debug_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParaBasic::CopyFrom(const ParaBasic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_costmap.ParaBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaBasic::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ParaBasic::InternalSwap(ParaBasic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParaBasic, _impl_.is_debug_)
      + sizeof(ParaBasic::_impl_.is_debug_)
      - PROTOBUF_FIELD_OFFSET(ParaBasic, _impl_.is_raw_rosmessage_)>(
          reinterpret_cast<char*>(&_impl_.is_raw_rosmessage_),
          reinterpret_cast<char*>(&other->_impl_.is_raw_rosmessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParaBasic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_costmap_5fparameter_5fsetting_2eproto_getter, &descriptor_table_costmap_5fparameter_5fsetting_2eproto_once,
      file_level_metadata_costmap_5fparameter_5fsetting_2eproto[0]);
}

// ===================================================================

class ParaCostmapInterface::_Internal {
 public:
  using HasBits = decltype(std::declval<ParaCostmapInterface>()._impl_._has_bits_);
  static void set_has_global_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_robot_base_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_footprint_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_transform_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distance_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_map_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_map_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_map_origin_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_map_origin_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_map_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_tracking_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_rolling_window(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_has_obstacle_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_has_static_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_inflation_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map_update_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000ffff) ^ 0x0000ffff) != 0;
  }
};

ParaCostmapInterface::ParaCostmapInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roborts_costmap.ParaCostmapInterface)
}
ParaCostmapInterface::ParaCostmapInterface(const ParaCostmapInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParaCostmapInterface* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.global_frame_){}
    , decltype(_impl_.robot_base_frame_){}
    , decltype(_impl_.inflation_file_path_){}
    , decltype(_impl_.footprint_padding_){}
    , decltype(_impl_.transform_tolerance_){}
    , decltype(_impl_.distance_threshold_){}
    , decltype(_impl_.map_width_){}
    , decltype(_impl_.map_height_){}
    , decltype(_impl_.map_origin_x_){}
    , decltype(_impl_.map_origin_y_){}
    , decltype(_impl_.map_resolution_){}
    , decltype(_impl_.map_update_frequency_){}
    , decltype(_impl_.is_tracking_unknown_){}
    , decltype(_impl_.is_rolling_window_){}
    , decltype(_impl_.has_obstacle_layer_){}
    , decltype(_impl_.has_static_layer_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.global_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_global_frame()) {
    _this->_impl_.global_frame_.Set(from._internal_global_frame(), 
      _this->GetArenaForAllocation());
  }
  _impl_.robot_base_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_base_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_robot_base_frame()) {
    _this->_impl_.robot_base_frame_.Set(from._internal_robot_base_frame(), 
      _this->GetArenaForAllocation());
  }
  _impl_.inflation_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inflation_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_inflation_file_path()) {
    _this->_impl_.inflation_file_path_.Set(from._internal_inflation_file_path(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.footprint_padding_, &from._impl_.footprint_padding_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_static_layer_) -
    reinterpret_cast<char*>(&_impl_.footprint_padding_)) + sizeof(_impl_.has_static_layer_));
  // @@protoc_insertion_point(copy_constructor:roborts_costmap.ParaCostmapInterface)
}

inline void ParaCostmapInterface::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.global_frame_){}
    , decltype(_impl_.robot_base_frame_){}
    , decltype(_impl_.inflation_file_path_){}
    , decltype(_impl_.footprint_padding_){0}
    , decltype(_impl_.transform_tolerance_){0}
    , decltype(_impl_.distance_threshold_){0}
    , decltype(_impl_.map_width_){0}
    , decltype(_impl_.map_height_){0}
    , decltype(_impl_.map_origin_x_){0}
    , decltype(_impl_.map_origin_y_){0}
    , decltype(_impl_.map_resolution_){0}
    , decltype(_impl_.map_update_frequency_){0}
    , decltype(_impl_.is_tracking_unknown_){false}
    , decltype(_impl_.is_rolling_window_){false}
    , decltype(_impl_.has_obstacle_layer_){false}
    , decltype(_impl_.has_static_layer_){false}
  };
  _impl_.global_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.robot_base_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_base_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inflation_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inflation_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParaCostmapInterface::~ParaCostmapInterface() {
  // @@protoc_insertion_point(destructor:roborts_costmap.ParaCostmapInterface)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParaCostmapInterface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.global_frame_.Destroy();
  _impl_.robot_base_frame_.Destroy();
  _impl_.inflation_file_path_.Destroy();
}

void ParaCostmapInterface::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParaCostmapInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_costmap.ParaCostmapInterface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.global_frame_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.robot_base_frame_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.inflation_file_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.footprint_padding_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.map_height_) -
        reinterpret_cast<char*>(&_impl_.footprint_padding_)) + sizeof(_impl_.map_height_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.map_origin_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.has_static_layer_) -
        reinterpret_cast<char*>(&_impl_.map_origin_x_)) + sizeof(_impl_.has_static_layer_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParaCostmapInterface::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string global_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_global_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "roborts_costmap.ParaCostmapInterface.global_frame");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string robot_base_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_robot_base_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "roborts_costmap.ParaCostmapInterface.robot_base_frame");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required double footprint_padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_footprint_padding(&has_bits);
          _impl_.footprint_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double transform_tolerance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_transform_tolerance(&has_bits);
          _impl_.transform_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double distance_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_distance_threshold(&has_bits);
          _impl_.distance_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double map_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_map_width(&has_bits);
          _impl_.map_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double map_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_map_height(&has_bits);
          _impl_.map_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double map_origin_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_map_origin_x(&has_bits);
          _impl_.map_origin_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double map_origin_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_map_origin_y(&has_bits);
          _impl_.map_origin_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double map_resolution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_map_resolution(&has_bits);
          _impl_.map_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required bool is_tracking_unknown = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_tracking_unknown(&has_bits);
          _impl_.is_tracking_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_rolling_window = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_is_rolling_window(&has_bits);
          _impl_.is_rolling_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool has_obstacle_layer = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_has_obstacle_layer(&has_bits);
          _impl_.has_obstacle_layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool has_static_layer = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_has_static_layer(&has_bits);
          _impl_.has_static_layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string inflation_file_path = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_inflation_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "roborts_costmap.ParaCostmapInterface.inflation_file_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required double map_update_frequency = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_map_update_frequency(&has_bits);
          _impl_.map_update_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParaCostmapInterface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_costmap.ParaCostmapInterface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string global_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_global_frame().data(), static_cast<int>(this->_internal_global_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "roborts_costmap.ParaCostmapInterface.global_frame");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_global_frame(), target);
  }

  // required string robot_base_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_robot_base_frame().data(), static_cast<int>(this->_internal_robot_base_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "roborts_costmap.ParaCostmapInterface.robot_base_frame");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_robot_base_frame(), target);
  }

  // required double footprint_padding = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_footprint_padding(), target);
  }

  // required double transform_tolerance = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_transform_tolerance(), target);
  }

  // required double distance_threshold = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_distance_threshold(), target);
  }

  // required double map_width = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_map_width(), target);
  }

  // required double map_height = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_map_height(), target);
  }

  // required double map_origin_x = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_map_origin_x(), target);
  }

  // required double map_origin_y = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_map_origin_y(), target);
  }

  // required double map_resolution = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_map_resolution(), target);
  }

  // required bool is_tracking_unknown = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_tracking_unknown(), target);
  }

  // required bool is_rolling_window = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_rolling_window(), target);
  }

  // required bool has_obstacle_layer = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_has_obstacle_layer(), target);
  }

  // required bool has_static_layer = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_has_static_layer(), target);
  }

  // required string inflation_file_path = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inflation_file_path().data(), static_cast<int>(this->_internal_inflation_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "roborts_costmap.ParaCostmapInterface.inflation_file_path");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_inflation_file_path(), target);
  }

  // required double map_update_frequency = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_map_update_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_costmap.ParaCostmapInterface)
  return target;
}

size_t ParaCostmapInterface::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_costmap.ParaCostmapInterface)
  size_t total_size = 0;

  if (_internal_has_global_frame()) {
    // required string global_frame = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_global_frame());
  }

  if (_internal_has_robot_base_frame()) {
    // required string robot_base_frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_base_frame());
  }

  if (_internal_has_inflation_file_path()) {
    // required string inflation_file_path = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inflation_file_path());
  }

  if (_internal_has_footprint_padding()) {
    // required double footprint_padding = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_transform_tolerance()) {
    // required double transform_tolerance = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_distance_threshold()) {
    // required double distance_threshold = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_map_width()) {
    // required double map_width = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_map_height()) {
    // required double map_height = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_map_origin_x()) {
    // required double map_origin_x = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_map_origin_y()) {
    // required double map_origin_y = 9;
    total_size += 1 + 8;
  }

  if (_internal_has_map_resolution()) {
    // required double map_resolution = 10;
    total_size += 1 + 8;
  }

  if (_internal_has_map_update_frequency()) {
    // required double map_update_frequency = 16;
    total_size += 2 + 8;
  }

  if (_internal_has_is_tracking_unknown()) {
    // required bool is_tracking_unknown = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_is_rolling_window()) {
    // required bool is_rolling_window = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_has_obstacle_layer()) {
    // required bool has_obstacle_layer = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_has_static_layer()) {
    // required bool has_static_layer = 14;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ParaCostmapInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_costmap.ParaCostmapInterface)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000ffff) ^ 0x0000ffff) == 0) {  // All required fields are present.
    // required string global_frame = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_global_frame());

    // required string robot_base_frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_base_frame());

    // required string inflation_file_path = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inflation_file_path());

    // required double footprint_padding = 3;
    total_size += 1 + 8;

    // required double transform_tolerance = 4;
    total_size += 1 + 8;

    // required double distance_threshold = 5;
    total_size += 1 + 8;

    // required double map_width = 6;
    total_size += 1 + 8;

    // required double map_height = 7;
    total_size += 1 + 8;

    // required double map_origin_x = 8;
    total_size += 1 + 8;

    // required double map_origin_y = 9;
    total_size += 1 + 8;

    // required double map_resolution = 10;
    total_size += 1 + 8;

    // required double map_update_frequency = 16;
    total_size += 2 + 8;

    // required bool is_tracking_unknown = 11;
    total_size += 1 + 1;

    // required bool is_rolling_window = 12;
    total_size += 1 + 1;

    // required bool has_obstacle_layer = 13;
    total_size += 1 + 1;

    // required bool has_static_layer = 14;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParaCostmapInterface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParaCostmapInterface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParaCostmapInterface::GetClassData() const { return &_class_data_; }


void ParaCostmapInterface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParaCostmapInterface*>(&to_msg);
  auto& from = static_cast<const ParaCostmapInterface&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roborts_costmap.ParaCostmapInterface)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_global_frame(from._internal_global_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_robot_base_frame(from._internal_robot_base_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_inflation_file_path(from._internal_inflation_file_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.footprint_padding_ = from._impl_.footprint_padding_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.transform_tolerance_ = from._impl_.transform_tolerance_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.distance_threshold_ = from._impl_.distance_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.map_width_ = from._impl_.map_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.map_height_ = from._impl_.map_height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.map_origin_x_ = from._impl_.map_origin_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.map_origin_y_ = from._impl_.map_origin_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.map_resolution_ = from._impl_.map_resolution_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.map_update_frequency_ = from._impl_.map_update_frequency_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.is_tracking_unknown_ = from._impl_.is_tracking_unknown_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.is_rolling_window_ = from._impl_.is_rolling_window_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.has_obstacle_layer_ = from._impl_.has_obstacle_layer_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.has_static_layer_ = from._impl_.has_static_layer_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParaCostmapInterface::CopyFrom(const ParaCostmapInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_costmap.ParaCostmapInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaCostmapInterface::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ParaCostmapInterface::InternalSwap(ParaCostmapInterface* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.global_frame_, lhs_arena,
      &other->_impl_.global_frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.robot_base_frame_, lhs_arena,
      &other->_impl_.robot_base_frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inflation_file_path_, lhs_arena,
      &other->_impl_.inflation_file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParaCostmapInterface, _impl_.has_static_layer_)
      + sizeof(ParaCostmapInterface::_impl_.has_static_layer_)
      - PROTOBUF_FIELD_OFFSET(ParaCostmapInterface, _impl_.footprint_padding_)>(
          reinterpret_cast<char*>(&_impl_.footprint_padding_),
          reinterpret_cast<char*>(&other->_impl_.footprint_padding_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParaCostmapInterface::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_costmap_5fparameter_5fsetting_2eproto_getter, &descriptor_table_costmap_5fparameter_5fsetting_2eproto_once,
      file_level_metadata_costmap_5fparameter_5fsetting_2eproto[1]);
}

// ===================================================================

class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roborts_costmap.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:roborts_costmap.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:roborts_costmap.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_costmap.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_costmap.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_costmap.Point)
  return target;
}

size_t Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_costmap.Point)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_costmap.Point)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roborts_costmap.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_costmap.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)
      + sizeof(Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_costmap_5fparameter_5fsetting_2eproto_getter, &descriptor_table_costmap_5fparameter_5fsetting_2eproto_once,
      file_level_metadata_costmap_5fparameter_5fsetting_2eproto[2]);
}

// ===================================================================

class Footprint::_Internal {
 public:
};

Footprint::Footprint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roborts_costmap.Footprint)
}
Footprint::Footprint(const Footprint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Footprint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){from._impl_.point_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:roborts_costmap.Footprint)
}

inline void Footprint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Footprint::~Footprint() {
  // @@protoc_insertion_point(destructor:roborts_costmap.Footprint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Footprint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.point_.~RepeatedPtrField();
}

void Footprint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Footprint::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_costmap.Footprint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Footprint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .roborts_costmap.Point point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Footprint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_costmap.Footprint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .roborts_costmap.Point point = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_costmap.Footprint)
  return target;
}

size_t Footprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_costmap.Footprint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .roborts_costmap.Point point = 1;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->_impl_.point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Footprint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Footprint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Footprint::GetClassData() const { return &_class_data_; }


void Footprint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Footprint*>(&to_msg);
  auto& from = static_cast<const Footprint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roborts_costmap.Footprint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.point_.MergeFrom(from._impl_.point_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Footprint::CopyFrom(const Footprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_costmap.Footprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Footprint::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.point_))
    return false;
  return true;
}

void Footprint::InternalSwap(Footprint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.point_.InternalSwap(&other->_impl_.point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Footprint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_costmap_5fparameter_5fsetting_2eproto_getter, &descriptor_table_costmap_5fparameter_5fsetting_2eproto_once,
      file_level_metadata_costmap_5fparameter_5fsetting_2eproto[3]);
}

// ===================================================================

class ParaCollection::_Internal {
 public:
  using HasBits = decltype(std::declval<ParaCollection>()._impl_._has_bits_);
  static const ::roborts_costmap::ParaCostmapInterface& para_costmap_interface(const ParaCollection* msg);
  static void set_has_para_costmap_interface(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::roborts_costmap::Footprint& footprint(const ParaCollection* msg);
  static void set_has_footprint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::roborts_costmap::ParaBasic& para_basic(const ParaCollection* msg);
  static void set_has_para_basic(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::roborts_costmap::ParaCostmapInterface&
ParaCollection::_Internal::para_costmap_interface(const ParaCollection* msg) {
  return *msg->_impl_.para_costmap_interface_;
}
const ::roborts_costmap::Footprint&
ParaCollection::_Internal::footprint(const ParaCollection* msg) {
  return *msg->_impl_.footprint_;
}
const ::roborts_costmap::ParaBasic&
ParaCollection::_Internal::para_basic(const ParaCollection* msg) {
  return *msg->_impl_.para_basic_;
}
ParaCollection::ParaCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roborts_costmap.ParaCollection)
}
ParaCollection::ParaCollection(const ParaCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParaCollection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.para_costmap_interface_){nullptr}
    , decltype(_impl_.footprint_){nullptr}
    , decltype(_impl_.para_basic_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_para_costmap_interface()) {
    _this->_impl_.para_costmap_interface_ = new ::roborts_costmap::ParaCostmapInterface(*from._impl_.para_costmap_interface_);
  }
  if (from._internal_has_footprint()) {
    _this->_impl_.footprint_ = new ::roborts_costmap::Footprint(*from._impl_.footprint_);
  }
  if (from._internal_has_para_basic()) {
    _this->_impl_.para_basic_ = new ::roborts_costmap::ParaBasic(*from._impl_.para_basic_);
  }
  // @@protoc_insertion_point(copy_constructor:roborts_costmap.ParaCollection)
}

inline void ParaCollection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.para_costmap_interface_){nullptr}
    , decltype(_impl_.footprint_){nullptr}
    , decltype(_impl_.para_basic_){nullptr}
  };
}

ParaCollection::~ParaCollection() {
  // @@protoc_insertion_point(destructor:roborts_costmap.ParaCollection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParaCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.para_costmap_interface_;
  if (this != internal_default_instance()) delete _impl_.footprint_;
  if (this != internal_default_instance()) delete _impl_.para_basic_;
}

void ParaCollection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParaCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_costmap.ParaCollection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.para_costmap_interface_ != nullptr);
      _impl_.para_costmap_interface_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.footprint_ != nullptr);
      _impl_.footprint_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.para_basic_ != nullptr);
      _impl_.para_basic_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParaCollection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .roborts_costmap.ParaCostmapInterface para_costmap_interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_para_costmap_interface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .roborts_costmap.Footprint footprint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_footprint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .roborts_costmap.ParaBasic para_basic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_para_basic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParaCollection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_costmap.ParaCollection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .roborts_costmap.ParaCostmapInterface para_costmap_interface = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::para_costmap_interface(this),
        _Internal::para_costmap_interface(this).GetCachedSize(), target, stream);
  }

  // required .roborts_costmap.Footprint footprint = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::footprint(this),
        _Internal::footprint(this).GetCachedSize(), target, stream);
  }

  // required .roborts_costmap.ParaBasic para_basic = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::para_basic(this),
        _Internal::para_basic(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_costmap.ParaCollection)
  return target;
}

size_t ParaCollection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_costmap.ParaCollection)
  size_t total_size = 0;

  if (_internal_has_para_costmap_interface()) {
    // required .roborts_costmap.ParaCostmapInterface para_costmap_interface = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.para_costmap_interface_);
  }

  if (_internal_has_footprint()) {
    // required .roborts_costmap.Footprint footprint = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.footprint_);
  }

  if (_internal_has_para_basic()) {
    // required .roborts_costmap.ParaBasic para_basic = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.para_basic_);
  }

  return total_size;
}
size_t ParaCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_costmap.ParaCollection)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .roborts_costmap.ParaCostmapInterface para_costmap_interface = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.para_costmap_interface_);

    // required .roborts_costmap.Footprint footprint = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.footprint_);

    // required .roborts_costmap.ParaBasic para_basic = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.para_basic_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParaCollection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParaCollection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParaCollection::GetClassData() const { return &_class_data_; }


void ParaCollection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParaCollection*>(&to_msg);
  auto& from = static_cast<const ParaCollection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roborts_costmap.ParaCollection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_para_costmap_interface()->::roborts_costmap::ParaCostmapInterface::MergeFrom(
          from._internal_para_costmap_interface());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_footprint()->::roborts_costmap::Footprint::MergeFrom(
          from._internal_footprint());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_para_basic()->::roborts_costmap::ParaBasic::MergeFrom(
          from._internal_para_basic());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParaCollection::CopyFrom(const ParaCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_costmap.ParaCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaCollection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_para_costmap_interface()) {
    if (!_impl_.para_costmap_interface_->IsInitialized()) return false;
  }
  if (_internal_has_footprint()) {
    if (!_impl_.footprint_->IsInitialized()) return false;
  }
  if (_internal_has_para_basic()) {
    if (!_impl_.para_basic_->IsInitialized()) return false;
  }
  return true;
}

void ParaCollection::InternalSwap(ParaCollection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParaCollection, _impl_.para_basic_)
      + sizeof(ParaCollection::_impl_.para_basic_)
      - PROTOBUF_FIELD_OFFSET(ParaCollection, _impl_.para_costmap_interface_)>(
          reinterpret_cast<char*>(&_impl_.para_costmap_interface_),
          reinterpret_cast<char*>(&other->_impl_.para_costmap_interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParaCollection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_costmap_5fparameter_5fsetting_2eproto_getter, &descriptor_table_costmap_5fparameter_5fsetting_2eproto_once,
      file_level_metadata_costmap_5fparameter_5fsetting_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace roborts_costmap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::roborts_costmap::ParaBasic*
Arena::CreateMaybeMessage< ::roborts_costmap::ParaBasic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roborts_costmap::ParaBasic >(arena);
}
template<> PROTOBUF_NOINLINE ::roborts_costmap::ParaCostmapInterface*
Arena::CreateMaybeMessage< ::roborts_costmap::ParaCostmapInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roborts_costmap::ParaCostmapInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::roborts_costmap::Point*
Arena::CreateMaybeMessage< ::roborts_costmap::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roborts_costmap::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::roborts_costmap::Footprint*
Arena::CreateMaybeMessage< ::roborts_costmap::Footprint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roborts_costmap::Footprint >(arena);
}
template<> PROTOBUF_NOINLINE ::roborts_costmap::ParaCollection*
Arena::CreateMaybeMessage< ::roborts_costmap::ParaCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roborts_costmap::ParaCollection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
