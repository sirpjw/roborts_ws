// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: local_planner.proto

#include "local_planner.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace roborts_local_planner {
PROTOBUF_CONSTEXPR LocalAlgorithms::LocalAlgorithms(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{}
  , /*decltype(_impl_.selected_algorithm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frequency_)*/0} {}
struct LocalAlgorithmsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalAlgorithmsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalAlgorithmsDefaultTypeInternal() {}
  union {
    LocalAlgorithms _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalAlgorithmsDefaultTypeInternal _LocalAlgorithms_default_instance_;
}  // namespace roborts_local_planner
static ::_pb::Metadata file_level_metadata_local_5fplanner_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_local_5fplanner_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_local_5fplanner_2eproto = nullptr;

const uint32_t TableStruct_local_5fplanner_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::roborts_local_planner::LocalAlgorithms, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::roborts_local_planner::LocalAlgorithms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roborts_local_planner::LocalAlgorithms, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::roborts_local_planner::LocalAlgorithms, _impl_.selected_algorithm_),
  PROTOBUF_FIELD_OFFSET(::roborts_local_planner::LocalAlgorithms, _impl_.frequency_),
  ~0u,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::roborts_local_planner::LocalAlgorithms)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::roborts_local_planner::_LocalAlgorithms_default_instance_._instance,
};

const char descriptor_table_protodef_local_5fplanner_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023local_planner.proto\022\025roborts_local_pla"
  "nner\"N\n\017LocalAlgorithms\022\014\n\004name\030\001 \003(\t\022\032\n"
  "\022selected_algorithm\030\002 \001(\t\022\021\n\tfrequency\030\003"
  " \001(\001"
  ;
static ::_pbi::once_flag descriptor_table_local_5fplanner_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_local_5fplanner_2eproto = {
    false, false, 124, descriptor_table_protodef_local_5fplanner_2eproto,
    "local_planner.proto",
    &descriptor_table_local_5fplanner_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_local_5fplanner_2eproto::offsets,
    file_level_metadata_local_5fplanner_2eproto, file_level_enum_descriptors_local_5fplanner_2eproto,
    file_level_service_descriptors_local_5fplanner_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_local_5fplanner_2eproto_getter() {
  return &descriptor_table_local_5fplanner_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_local_5fplanner_2eproto(&descriptor_table_local_5fplanner_2eproto);
namespace roborts_local_planner {

// ===================================================================

class LocalAlgorithms::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalAlgorithms>()._impl_._has_bits_);
  static void set_has_selected_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LocalAlgorithms::LocalAlgorithms(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roborts_local_planner.LocalAlgorithms)
}
LocalAlgorithms::LocalAlgorithms(const LocalAlgorithms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalAlgorithms* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){from._impl_.name_}
    , decltype(_impl_.selected_algorithm_){}
    , decltype(_impl_.frequency_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.selected_algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selected_algorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selected_algorithm()) {
    _this->_impl_.selected_algorithm_.Set(from._internal_selected_algorithm(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.frequency_ = from._impl_.frequency_;
  // @@protoc_insertion_point(copy_constructor:roborts_local_planner.LocalAlgorithms)
}

inline void LocalAlgorithms::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){arena}
    , decltype(_impl_.selected_algorithm_){}
    , decltype(_impl_.frequency_){0}
  };
  _impl_.selected_algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selected_algorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocalAlgorithms::~LocalAlgorithms() {
  // @@protoc_insertion_point(destructor:roborts_local_planner.LocalAlgorithms)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalAlgorithms::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.~RepeatedPtrField();
  _impl_.selected_algorithm_.Destroy();
}

void LocalAlgorithms::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalAlgorithms::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_local_planner.LocalAlgorithms)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.selected_algorithm_.ClearNonDefaultToEmpty();
  }
  _impl_.frequency_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalAlgorithms::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "roborts_local_planner.LocalAlgorithms.name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string selected_algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_selected_algorithm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "roborts_local_planner.LocalAlgorithms.selected_algorithm");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_frequency(&has_bits);
          _impl_.frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalAlgorithms::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_local_planner.LocalAlgorithms)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name = 1;
  for (int i = 0, n = this->_internal_name_size(); i < n; i++) {
    const auto& s = this->_internal_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "roborts_local_planner.LocalAlgorithms.name");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string selected_algorithm = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selected_algorithm().data(), static_cast<int>(this->_internal_selected_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "roborts_local_planner.LocalAlgorithms.selected_algorithm");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_selected_algorithm(), target);
  }

  // optional double frequency = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_local_planner.LocalAlgorithms)
  return target;
}

size_t LocalAlgorithms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_local_planner.LocalAlgorithms)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.name_.size());
  for (int i = 0, n = _impl_.name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.name_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string selected_algorithm = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selected_algorithm());
    }

    // optional double frequency = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalAlgorithms::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalAlgorithms::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalAlgorithms::GetClassData() const { return &_class_data_; }


void LocalAlgorithms::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalAlgorithms*>(&to_msg);
  auto& from = static_cast<const LocalAlgorithms&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roborts_local_planner.LocalAlgorithms)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.name_.MergeFrom(from._impl_.name_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_selected_algorithm(from._internal_selected_algorithm());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.frequency_ = from._impl_.frequency_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalAlgorithms::CopyFrom(const LocalAlgorithms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_local_planner.LocalAlgorithms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalAlgorithms::IsInitialized() const {
  return true;
}

void LocalAlgorithms::InternalSwap(LocalAlgorithms* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.name_.InternalSwap(&other->_impl_.name_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selected_algorithm_, lhs_arena,
      &other->_impl_.selected_algorithm_, rhs_arena
  );
  swap(_impl_.frequency_, other->_impl_.frequency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalAlgorithms::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_local_5fplanner_2eproto_getter, &descriptor_table_local_5fplanner_2eproto_once,
      file_level_metadata_local_5fplanner_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace roborts_local_planner
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::roborts_local_planner::LocalAlgorithms*
Arena::CreateMaybeMessage< ::roborts_local_planner::LocalAlgorithms >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roborts_local_planner::LocalAlgorithms >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
